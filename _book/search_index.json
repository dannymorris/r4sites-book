[["index.html", "Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for creating personal websites, blogs, and professional portfolios using R, RStudio, and other freely available technologies including Git, Hugo, Netlify, and Google Analytics Chapter 1 Introduction", " Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for creating personal websites, blogs, and professional portfolios using R, RStudio, and other freely available technologies including Git, Hugo, Netlify, and Google Analytics Danny Morris 2021-04-24 Chapter 1 Introduction As a data scientist with a creative spirit, I love writing and creating content. Several years ago, I published my first personal website, Abnormal Distributions. Getting started was hard. It took me months to learn new technologies and to get comfortable operating this simple little blog. Since then, Abnormal Distributions has served over 50,000 page views and 20,000 users. I paste links to it on my resumes, social profiles, and networking introductions. I constantly get messages from aspiring data scientists that essentially read, “Hey, saw a post on your website about [insert topic]. Would love to learn more!” Recruiters on LinkedIn often point to my website as the reason for connecting with me regarding a job opportunity. Abnormal Distributions turned out to be a wonderful investment of time as it helped spark my creativity, deepen my subject matter expertise through writing, and connect me with new people and opportunities. My goal with this book is to help you launch your own personal website, blog, or project portfolio as quickly and painlessly as possible. You will learn the same steps that I take to create, design, publish, and analyze websites using R and other open source tools including RStudio, Git, Hugo, Netlify, and Google Analytics. All of the tools presented in this book are free to download or available through free accounts. No prior experience in web development is needed to be successful with this book. "],["complete-end-to-end-example.html", "Chapter 2 Complete end-to-end example 2.1 Install software 2.2 Create accounts 2.3 Create a blogdown website 2.4 Push the website to GitHub 2.5 Deploy the website on Netlify 2.6 Set up Google Analytics", " Chapter 2 Complete end-to-end example This chapter is for those of you who would like to dive right into an example. If you work through the steps in this chapter, you will have end up with a complete, functioning website that you can tweak to taste. The steps include: Install software and create accounts Create a basic website using the blogdown R package Push the website files to GitHub Deploy the website on Netlify Set up Google Analytics to analyze traffic 2.1 Install software Start off by installing these free, open source tools if you haven’t already. My recommendation is to download the latest versions, which at the time of this writing are R 4.0, RStudio 1.4, Git 2.31.1, and Hugo 0.82. R RStudio Git Hugo 2.2 Create accounts Create free accounts with GitHub, Netlify, Google Analytics, and Formspree(optional). Start with GitHub first, then use your GitHub registration to sign up for a Netlify account. To sign up for Google Analytics, click the link below and locate “Start for free” on the landing page. Formspree is optional yet recommended if you want to embed contact forms on your website. GitHub Netlify Google Analytics (Optional) Formspree 2.3 Create a blogdown website blogdown makes it super easy to create a website based on the Hugo framework. Follow these steps to create a website on your local machine. Launch RStudio and install the blogdown package by running install.packages(\"blogdown\"). Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown Configure the website accordingly, then click Create Project. Example Confirm that everything is working properly by running blogdown::serve_site(). A preview of your website should appear in the Viewer pane in RStudio. 2.4 Push the website to GitHub Once your site is working locally, the next steps are to create a remote GitHub repository for your website, configure a local Git repository, and push your website files from your local environment to the remote repository. Follow these steps to create a remote GitHub repository and sync it to your local Git repository. Create a remote GitHub repository by signing in to GitHub and clicking “New” in the Repositories section. Configure the repository accordingly, then click Create repository. Example Create a local Git repository and associate it with the GitHub repository created in the previous step. To do this, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and running the following Git commands. # Change the directory to your website&#39;s root folder cd path/to/your/website/files # initialize local Git repo git init # add your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # point the local Git repo to the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 2.5 Deploy the website on Netlify Now that your website files are stored in your GitHub repository, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify account using your GitHub registration and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose the Github repository you configured in the previous steps. Leave the site settings alone and click “Deploy site” to publish your website. Example After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the domain name randomly generated by Netlify. Example. Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 2.6 Set up Google Analytics The final step is to set up Google Analytics to analyze traffic to your website. If you haven’t already, be sure to create a free account. Follow these steps to link Google Analytics to your website. Sign in to Google Analytics and navigate to Admin &gt; Create Account. Example Under Account setup, provide an appropriate name (e.g. my-example-site) and configure the Account Data Sharing Settings to your liking. Click “Next.” Under Property setup, provide an appropriate name (e.g. example-site-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL provided by Netlify when you first deployed your website. Click “Next.” Example Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate and copy the Tracking Code by returning the Google Analytics landing page and navigating to the Admin console. Select the Account and Property that were created in the previous steps. Under Property, click on Tracking Info &gt; Tracking Code. Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. Example Return to your RStudio Project where you are developing your website. Open the file config.yaml in the main directory and locate the googleAnalytics: parameter. Paste your Google Analytics Tracking ID here, e.g. googleAnalytics: 'UA-XXXXXXXXX-1'. Example "],["style.html", "Chapter 3 Styling your website 3.1 Selecting a Hugo theme 3.2 Editing your theme", " Chapter 3 Styling your website This chapter provides some tips and tricks for designing the look and feel of your website to reflect your personal style and achieve your goals. Designing your website is your opportunity to be creative and artistic, but it can be a major pitfall if you’re not careful. The key to creating an appealling, sustainable website design is to select a Hugo theme (more on this later) that contains 90% or more of what you want your website to look and feel like without any modifications. The remaining 10% of your design can come from basic customizations to the theme such as colors, fonts, images, and simple tweaks to the HTML. Unless you are (or want to be) an expert in front end web development, trying to make too many customizations can result in you constantly struggling to compensate for any poor design choices you may have made. Note that website design is highly personal and subjective. There are no rules or requirements. My goal with this chapter is to steer you towards some designs that I have found to be attractive, flexible, and sustainable, and to also empower you to discover new designs that are better suited to you and your goals. 3.1 Selecting a Hugo theme The look and feel of your website is largely determined by your choice of pre-built Hugo themes. Dozens of themes created by expert developers are freely available for you to use in your own website projecet. Once you find a theme you would like to try, you can specify this theme when you create a new blogdown website. 3.1.1 Recommended themes Depending on your goals, you may be more or less restricted to certain Hugo themes. For example, if you intend to create dynamic content (e.g. posts) from R Markdown documents that feature code, tables, and interactive visualizations, then you may find that certain themes do a poor job of rendering these types of output. On the other hand, if you intend to create static content using basic markdown and multimedia, you may not experience any content rendering issues with any of the themes you consider. Either way, you’ll likely go through a few rounds of trial and error before you settle on a theme that meets most or all of your needs. Tip: When browsing Hugo themes, pay attention to the date on which the theme was most recently updated. Example. It’s best to avoid themes that have not been updated in years. Here are some themes that I recommend based on performance, content rendering, and personal style preference. Recommended themes for content written in R Markdown Cupper - Simple, clean, readable, minimalist. Great for portfolios and writing. Tranquilpeak - Modern, clean layout. Easy to customize and very readable. Great for personal websites, blogs, and portfolios. Anatole - Similar to Tranquilpeak with a more sophisticated About page. Eureka - Clean, professional layout. Easy to customize. Great for portfolios and professional landing pages. Recommended themes for content written in standard markdown Hargo and Vex - Modern e-commerce themes for advertising and selling products Doks - Modern documentation theme Bigspring - Modern design for small businesses offering a particular service Pico - Modern design for promoting yourself and your work Hugo Product Launch - Simple layout for promoting an upcoming product Hugo Scroll - Simple, highly visual layout for promoting your services or expertise 3.1.2 Creating a website with your chosen theme To create a new blogdown website with a new Hugo theme, follow these steps: Browse the list of Hugo themes. Click on a theme you like, then click “Demo” to explore a complete example. Once you find something you really like, click “Download” on the theme homepage to be taken to the source code in GitHub. Example. To create a website with your chose theme, copy the user/theme-name in the GitHub URL. For example, if the source code is located at https://github.com/devcows/hugo-universal-theme, you’ll want to copy devcows/hugo-universal-theme. Follow the steps to create a new blogdown website. This time, configure the website to use your chosen theme instead of the default theme. For example, replace yihui/hugo-lithium with devcows/hugo-universal-theme to use your chosen theme. 3.2 Editing your theme In all likelihood, you will want to edit some aspects of the theme to alter the look and feel of your website. It’s important to note that themes are inconsistent in terms of their file structures and customization paths. Therefore, there is no universal approach to editing themes. There are, however, some common approaches to editing basic characteristics such as colors, font styles, and basic layouts. Those will be described in this section. Tip: Use the “Inspect” tool in your browser to edit CSS on the fly and experiment with design changes. Access this tool in the browser by right-clicking on the page element you want to edit (e.g. image, text, link) and click on “Inspect.” Example Let’s start with a use case focusing on the Anatole theme. To begin, follow the instructions outlined in creating a website with your chosen theme. Then, follow along with the steps below. To view the finished product, visit https://example-anatole.netlify.app/ Before you make any edits, go ahead and run blogdown::serve_site() in the R console. This will launch your website locally and will update automatically whenever edits are detected. Navigate to config/_default/languages.toml and edit your website’s title. The default text “My Blog” can be changed to something more informative. Example. Navigate to config/_default/params.toml and edit several parameters. Here is where you can edit the blog subtitle, Google Analytics tracking code, links to social media profiles, and more. Example. Naviage to static/images/ and replace profile.jpg with your own image. This will update the main thumbnail on the home page. Keep the file named profile.jpg so the theme will recognize your image. If the image dimensions seem off, navigate to themes/anatole/assets/css/style.css and edit the CSS properties. For this theme, you will need to edit the image dimensions here and here to accommodate varying screen sizes. Navigate to static/favicons/ and replace favicon.ico with your own favicon. The favicon is the tiny image that appears in the web browser tab for your website. To create a favicon from an image, visit https://favicon.io/favicon-converter/. Keep the file named favicon.ico in the same folder. Change the font properties. If you don’t like the default font, you can easily change it. For example, to use the Google Font Quicksand insert this line of code in the themes/anatole/layouts/partials/head.html file. Then, navigate to themes/anatole/assets/css/style.css and change the font property in the body element (example). You can also change basic font properties (e.g. size, color), but you will have to know what CSS class to change. Examples include p(example), .page-top .nav(example), and .page-top .nav a(example). (optional) Remove all content supporting a language translation. By default, the Anatole theme supports an Arabic language translation. To remove all content supporting this translation, delete the file config/_default/menus.ar.toml, edit the file config/_default/languages.toml by removing all Arabic language parameters (example), then delete the folder content/arabic/ and all of its contents. ##Closing thoughts on themes {-} Relying on themes is the quickest way to launch a website that looks and functions great. Editing the look and feel of your website can be a lot of fun, but you must be careful not to go overboard. Here are some tips to keep in the back of your mind while you’re editing your theme: Before you make any edits, go ahead and run blogdown::serve_site() in the R console within the RStudio Project. This will launch your website locally and will update automatically whenever edits are detected. Whenever you make a change, check the result on wide and narrow screens. You can do this with the browser on your desktop by maximizing the browser width (wide screen) and decreasing the width to mimic a mobile device (narrow screen). Try not to edit the theme’s default layout. Instead, focus on colors, font, images, and content to reflect you personal style. After you make a change, carefully scrutinize the result and look for any unexpected consequences. "],["content.html", "Chapter 4 Creating content 4.1 Creating posts 4.2 Example R Markdown post 4.3 Example Markdown post", " Chapter 4 Creating content This chapter provides some general guidance on creating content, such as blog posts, using R Markdown as well as plain Markdown. By this point, you should have created a new blogdown site with your preferred theme. In this chapter, we will continue to build on the website that was created in the previous chapter, which uses the Anatole theme. To view the finished product, visit https://example-anatole.netlify.app/ 4.1 Creating posts As the website developer, new content you create will typically be in the form of a post. Common types of posts are blog entries, tutorials, portfolio entries, project documentation, and so on. With blogdown, posts can either be R Markdown documents or plain Markdown documents. The only difference between the two is that R Markdown enables you to insert and execute server-side code (e.g. R code) and display the output in the post body in addition to plain Markdown syntax. Markdown, on the other hand, is static content that cannot execute server-side code. The recommended way to add a blog post is with the RStudio Addin labeled “New post,” as shown in this example. This addin will display a simple GUI for configuring the metadata for your new post including the post title, author, date, tags, content type and more. This example post configuration generates a R Markdown post destined for the post subdirectory. The archetype, filename, slug, and language are handled automatically and require no changes. 4.2 Example R Markdown post Before you create a new post, go ahead and run blogdown::serve_site() in the R console with your RStudio Project opened. This will launch your website locally and will update automatically whenever edits are saved. This is key for rapid development and iteration. If you haven’t already, leverage this example post configuration to create a new post R Markdown. The default document contains limited metadata and no body content. What to include is ultimately a matter of personal preference, but this R Markdown post provides a great starting point with some handy features including syntax highlighting, table of contents, and message/warning suppression. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-writing-a-post-using-r-markdown/ 4.3 Example Markdown post Unlike R Markdown, plain Markdown documents render static content only (e.g. text, images, multimedia) and cannot execute server-side code. If your post does not need to execute code and render its ouput, then author the post using plain Markdown. To configure a plain Markdown post, follow this example post configuration but change the Format parameter to Markdown instead of R Markdown. This example Markdown post should get you started. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-example-plain-markdown-post/ "],["deploy.html", "Chapter 5 Deploying on Netlify 5.1 How it works 5.2 Upload website files to GitHub 5.3 Configure Netlify for deployment 5.4 Using a custom domain name", " Chapter 5 Deploying on Netlify This chapter describes a simple, repeatable approach to putting your website on the internet. If you haven’t already, complete the following prerequisites. Create your blogdown website and (optionally) add some content Install Git Sign up for GitHub Sign up for Netlify 5.1 How it works Hugo (the static site generator used by blogdown), GitHub, and Netlify are the three tools that make it incredibly simple to deploy your website to the internet. The main steps are to upload your website files to a remote GitHub repository, then create a new site in Netlify that points to your GitHub repository URL. Netlify will then do all of the heavy lifting of building and deploying your Hugo website to the internet. All of this can be done in a matter of minutes with just a few lines of code and a few clicks. 5.2 Upload website files to GitHub Once your website is working locally, the next steps are to create a remote GitHub repository for your website files, configure a local Git repository, and push your website files from your local Git repository to your remote GitHub repository. Follow these simple steps to make this happen: Sign in to GitHub and create a new repository by clicking “New” in the Repositories section. Configure the repository accordingly, then click “Create repository.” Example On your local machine, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and run the following Git commands to sync a local Git repository with your newly created remote GitHub repository. # Change the directory to your website&#39;s root folder cd path/to/your/website # initialize local Git repo git init # add all of your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # sync the local Git repo with the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 5.3 Configure Netlify for deployment Now that your website files are stored in GitHub, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose your website’s GitHub repository. Leave the site settings alone and click “Deploy site” to publish your website. Example After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the default domain name generated by Netlify. Example. Default Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 5.4 Using a custom domain name Netlify’s default domain names end with .netlify.app. If you don’t care for this domain extension, you can purchase a custom domain for your website. Though several domain registrars exist, the simplest route is to purchase a domain name through Netlify. If you use a domain registrar other than Netlify (e.g. Google Domains), you will have to manually configure Domain Name Servers and Domain Name System settings. With Netlify, all of this is taken care of for you. Follow the simple steps below to purchase a custom domain through Netlify: Log in to Netlify, open your site, and click on “Domain settings.” Example. Under Custom domains, click “Add custom domain.” Search for a domain name you like, then click “Verify” to determine if the domain is already owned or available for purchase. If available, confirm the purchase with a credit card and (optionally) set the domain name to auto-renew annually. Example. Enable IPv6 to reach areas of the world where connectivity via IPv4 is not possible. Do this by signing in to Netlify and navigating to Team overview &gt; Domains, select your custom domain name, and click “Enable IPv6 on your domain.” Example. "],["analyzing-traffic-with-google-analytics.html", "Chapter 6 Analyzing traffic with Google Analytics 6.1 How it works 6.2 Setting up Google Analytics 6.3 Analyzing traffic using googleAnalyticsR", " Chapter 6 Analyzing traffic with Google Analytics This chapter shows you how to embed Google Analytics on your website to capture traffic from users. Additionally, this chapter will provide some guidance on how to analyze traffic using the R package googleAnalyticsR. If you haven’t already, complete the following prerequisites: Create your blogdown website and (optionally) add some content Deploy your site on Netlify Sign up for Google Analytics 6.1 How it works Once you sign up for Google Analytics, the main objectives are to create an Account and a Property for your website domain name, then obtain a Tracking ID. This tracking code will go in the config.yaml file on your website, which in turn will instruct Google Analytics to collect the data on user traffic to your website. 6.2 Setting up Google Analytics Follow these steps to integrate Google Analytics into your website: Sign in to Google Analytics and navigate to Admin &gt; Create Account. Example Under Account setup, provide an appropriate name (e.g. personal-website) and configure the Account Data Sharing Settings to your liking. The defaults should be fine. Click “Next.” Under Property setup, provide an appropriate name (e.g. personal-website-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL to your website. Click “Next.” Example Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate the Tracking ID by returning back to the Admin console and selecting the Account and Property that were created in the previous steps. Important: Make sure you locate the Universal Analytics property that reads property name (UA-XXXXXXX-X) and not the GA4 property. Under Property, click on Tracking Info &gt; Tracking Code (example). Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. Example Return to your RStudio Project where you are developing your website. Open the file config.yaml in the main directory and locate the googleAnalytics: parameter. Depending on the theme, this parameter may be written or spelled slightly differently. Paste your Google Analytics Tracking ID here, e.g. googleAnalytics: 'UA-XXXXXXXXX-1'. Example. Push your changes to your GitHub repository to complete the Google Analytics integration. 6.3 Analyzing traffic using googleAnalyticsR googleAnalyicsR is an R package for analyzing Google Analytics data stemming from traffic to your website. 6.3.1 Install the package install.packages(&quot;googleAnalyticsR&quot;, dependencies = TRUE) 6.3.2 Authenticate your Google Analytics account library(googleAnalyticsR) ga_auth() 6.3.3 Load packages for data analytics library(dplyr) library(plotly) library(DT) library(leaflet) 6.3.4 List your Google Analytics accounts and properties ## get your accounts ga_accounts &lt;- ga_account_list() ga_accounts 6.3.5 Obtain viewId associated with your website view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) 6.3.6 Daily count of website users daily_users &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;date&quot; ) %&gt;% as_tibble() plot_ly( data = daily_users, x = ~date, y = ~users, mode = &quot;lines&quot; ) %&gt;% layout(title = &quot;Daily count of users who engaged with Abnormal Distributions&quot;) 6.3.7 Users by device type users_by_device_type &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;deviceCategory&quot; ) %&gt;% as_tibble() plot_ly( data = users_by_device_type, x = ~deviceCategory, y = ~users, type = &quot;bar&quot; ) %&gt;% layout(title = &quot;Users by device type&quot;) 6.3.8 Page views by page page_views &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;pageviews&quot;, dimensions = &quot;pageTitle&quot; ) %&gt;% as_tibble() page_views %&gt;% arrange(desc(pageviews)) %&gt;% DT::datatable() 6.3.9 Users by location users_location &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) "]]
