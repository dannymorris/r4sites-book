[["index.html", "Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for launching your very own personal website, blog, or project portfolio using R, RStudio, and other freely available technologies including GitHub, Hugo, Netlify, and Google Analytics Chapter 1 Introduction 1.1 About this book 1.2 Target audience 1.3 Motivating use cases 1.4 What you will learn 1.5 Tools you will use 1.6 Inspiring examples 1.7 About Hugo, static websites, and R Markdown 1.8 FAQ 1.9 About the Author", " Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for launching your very own personal website, blog, or project portfolio using R, RStudio, and other freely available technologies including GitHub, Hugo, Netlify, and Google Analytics Danny Morris 2021-05-01 Chapter 1 Introduction Purchase this book 1.1 About this book In 2018, I had virtually no online presence other than about 100 random LinkedIn connections. I knew this was a problem given my budding interest in Data Science, the increasing demand for project portfolios, and the perceived need to “stand out” in the digital crowd. So, I learned how to publish my first personal website, Abnormal Distributions. Yes, I know, it looks outdated and definitely not as cool as this personal website. However, Abnormal Distributions served as the launchpad for growing my online presence. Since going live, it has served over 50,000 page views and 20,000 users from all over the world. To date, this post is by far the most popular. I began posting content on LinkedIn with links to my website, and in the span of a year I received 1,700 LinkedIn connection requests from Data Scientists and professionals in related fields. I began receiving job opportunities from recruiters who would reference Abnormal Distributions as the reason for wanting to connect. Abnormal Distributions turned out to be a wonderful investment of time and energy and an amazing learning experience. It helped spark my creativity, deepen my subject matter expertise through writing, and give me the confidence to engage with the digital crowd. My goal with this book is to help you launch your own personal website, blog, or project portfolio. You will learn the exact methdology that I use to create, design, publish, and analyze websites using R, RStudio, and other freely available tools including GitHub, Hugo, Netlify, and Google Analytics. All of the tools presented in this book are free to download or available through free accounts. No prior experience in web development, R, or any of the aforementioned technologies is needed to be successful with this book. 1.2 Target audience The target audience for this book includes students, working professionals, and researchers who want to launch their very own personal website. Most likely, however, this book will appeal to students and practitioners who associate with R, Data Analytics, Data Science, Machine Learning, Statistics, Mathematics, and related fields where technical writing is commonplace. Note that you do not have to be an experienced web developer to use the methodology described in this book. To learn more about whether or not this book is right for you, check out the FAQ section. 1.3 Motivating use cases There are many excellent reasons to launch your very own personal website. Below is a list of ideas to get you thinking. Be seen without being seen. If you are introverted like me, the thought of networking and promoting yourself in-person is a bit overwhelming. Operating a personal website is a great way to market yourself and meet people without being physically present. Enrich your social media presence. Personal websites give your social media viewers a path to learning more about you and the work you are doing. Start by enriching your LinkedIn profile by inserting links to your website in your headline, summary, Featured section, and any posts you make. Personalize your job applications. If there is a job you really want or a company you would love to work for, create a personalized website for this company with hyperfocused content and share it with the recruiter, hiring manager, current employees, and anyone else in the company’s network who might be impressed. I built this website when I applied to RStudio (spoiler: I did not get the job). Establish yourself as a thought leader. Are you passionate about certain topics? Create a website and start writing! Direct people to your website as often as you can to establish your thought leadership on the topic. By the way, you do not have to be an expert to be a thought leader. If you are learning a new topic and have some ideas you want to share, then you are a thought leader. Organize content for a specific class or project. This use case is a supreme opportunity to display leadership. If you are taking a class or working on a project, consider publishing a website (for free, of course) to organize your learnings and all essential documentation, as shown in this example. Promote a product or service. If you are thinking about selling your own products or services, consider publishing a landing page or an ecommerce site. This landing page, which was built using the methodology in this book, is used to promote this book and generate sales. 1.4 What you will learn This book will teach you how to build attractive, Generate an initial website using the RStudio, the blogdown R package, and Hugo themes. Fine tune the look and feel of your website including logos, colors, and fonts to reflect your unique style. Configure features such as contact forms and page navigation. Author posts (e.g. blog posts, tutorials, research articles, project portfolios, etc.) using plain Markdown, R, Python, and SQL within R Markdown documents. Deploy your website to the internet using GitHub and Netlify. Integrate Google Analytics into your website to capture traffic to your website, then use the googleAnalyticsR R package to analyze this data. 1.5 Tools you will use The methodology described in this book for building websites uses the tools listed below. Note that all of the tools listed are free to use. R and the blogdown package - Used for generating websites and authoring content. RStudio - Used for managing your website project and creating a remarkable website development experience. Hugo - Used by blogdown behind the scenes to generate beautiful, static websites. Git and GitHub - Used for pushing your website files from your local machine to a remote repository. Netlify - Used for publishing your website to the interent directly from your remote GitHub repository. Google Analytics and the googleAnalyticsR package - Used for analyzing user traffic on your website. Formspree - Used for putting contact forms on your website and collecting responses. 1.6 Inspiring examples Below are some examples of personal websites, blogs, and portfolios that have been built using Hugo and blogdown. Also, be sure check out the Awesome Blogdown website for many more examples. Abnormal Distributions - My personal website and blog. Outrageously simple and straightforward. Designed for sharing tutorials and ideas. Based on the Hugo Xmin theme. R-Ladies NYC - Organization website dedicated to promoting gender diversity in the R community. Clean, modern layout. Great design for promoting groups, teams, projects, and events. Adapted form the Hugo Academic theme. Evan Odell - Personal website authored by Evan Odell featuring a blog, project portfolio, and biography. Crisp, clean, readable layout. Adapted from the Beautiful Hugo theme. Maëlle Salmon - Personal website authored by Maëlle Salmon featuring a blog, list of talks, publications, and biography. Adapted from the Blackburn theme. Julia Silge - Personal website authored by Julia Silge. Simple and professional. Adapted from the Hugo Academic theme. 1.7 About Hugo, static websites, and R Markdown Hugo is a modern, user-friendly website generator that turns front-end content (Markdown, HTML, CSS, Javascript) into static websites. Static websites are client-side only, meaning they make no use of back-end servers or server-side scripting languages. The only thing required to run a static website is a web browser. Blogdown is an R package that leverages Hugo behind the scenes to generate static websites from the aforementioned front-end content and R Markdown documents. The integration of Hugo and R Markdown, which supports R, Python, and SQL languages, means website developers can author content that features code along with its output including tables and interactive data visualizations. 1.8 FAQ What is the financial cost to create, publish, and analyze the types of websites described in this book? Absolutely nothing, unless you elect to purchase custom domains name which are typically $1 USD per month. Do I need a background in web development to create my own website? Absolutely not. In fact, this book presents information with the assumption that readers do not have a background in web development. You will find that the tools described in this book make it very simple for anyone to create attractive, feature-rich, and sustainable websites. Do I need to know R to build the types of websites described in this book? Not at all. You could create and publish your personal website without knowing or writing a single line of R code. The methodology described in this book simply explains how to integrate R and its ouutput (e.g. tables, graphs) into a website. If you don’t know R, a website could be a great way to learn it and document your journey! Can I author content using programming languages other than R? Yes. Website content, such as blog posts, can be created using R Markdown documents which support plain Markdown, R, Python, and SQL. What is the role of RStudio in the process of building the types of websites described in this book? RStudio is a free desktop application where all of your website development takes place. RStudio provides a simple interface for managing your website projects and the supporting materials including content, images, and code. RStudio also contains a “Viewer” pane, which will display your webiste locally and update it in real-time as you make changes to your website. Can I publish my website behind a custom domain name? Yes. See the chapter on Deploying on Netlify. 1.9 About the Author Hi! My name is Danny Morris, and thanks for checking out my book. I am an industry Data Scientist with a passion for writing, creating visual content, and building predictive models. I have published over a dozen websites for various purposes using the methodology described in this book. More than anything, I love helping people launch or elevate their professional journey. Feel free to shoot me an email and connect with me on LinkedIn. "],["complete-end-to-end-example.html", "Chapter 2 Complete end-to-end example 2.1 How it works 2.2 Install software 2.3 Create accounts 2.4 Generate the website 2.5 Make some edits 2.6 Integrate Google Analytics 2.7 Integrate Formspree 2.8 Push the website to GitHub 2.9 Deploy the website on Netlify 2.10 Analyze Google Analytics data 2.11 Closing thoughts", " Chapter 2 Complete end-to-end example The purpose of this chapter is to inspire you with an example and to expose you to the entire process of creating, publishing, and analyzing your very own website. If you complete the steps described below, you will end up with this final product. If you like the look and feel of this final product, then all you need to do afterwards is personalize it (e.g. add your own profile image) and author content. These topics are described in the following chapters. 2.1 How it works The steps to create, publish, and analyze your very own personal website include: Install free software and create free accounts Generate the website using RStudio and the blogdown R package Make some basic edits to placeholder text Integrate Google Analytics to collect user traffic Integrate Formspree to power the contact form Push the website files to GitHub Deploy the live website on Netlify 2.2 Install software Start off by installing these free, open source tools if you haven’t already. My recommendation is to download the latest versions, which at the time of this writing are R 4.0, RStudio 1.4, Git 2.31.1. R RStudio Git 2.3 Create accounts Create free accounts with GitHub, Netlify, Google Analytics, and Formspree. Start with GitHub first, then use your GitHub registration to sign up for a Netlify account. To sign up for Google Analytics, click the link below and locate “Start for free” on the landing page. GitHub Netlify Google Analytics Formspree 2.4 Generate the website blogdown makes it super easy to generate a website that uses Hugo. Follow the steps below to create a website on your local machine. Launch RStudio and install the blogdown package by running install.packages(\"blogdown\"). Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. 📷 Image. Using the New Project Wizard, generate a website using the Hugo Anatole theme by defining Hugo theme: lxndrblz/anatole in the configuration. Click Create Project to generate the website. 📷 Image. Confirm that everything is working properly by running blogdown::serve_site() in the R console. A local, live, and fully functional preview of your website will appear in the Viewer pane in RStudio. 📷 Image. 2.5 Make some edits You will notice that the default Anatole theme contains placeholder text such as “My Blog” and “Call me Jane” on the homepage below the profile image. Follow the steps below to edit these placeholders. Change “My Blog” on the homepage by navigating to config/_default/languages.toml and changing the title parameter. &lt;/&gt; Code. Change “Call me Jane” on the homepage by navigating to config/_default/params.toml and editing the title parameter. While you’re here, feel free to change other parameters including description, profilePicture, and social media links. &lt;/&gt; Code. 2.6 Integrate Google Analytics Integrate Google Analytics into your website to collect and analyze user traffic. If you haven’t already, be sure to create a free Google Analytics account, then follow the steps below. Sign in to Google Analytics and navigate to Admin &gt; Create Account. 📷 Image Under Account setup, provide an appropriate name (e.g. my-example-site) and configure the Account Data Sharing Settings to your liking. Click “Next.” Under Property setup, provide an appropriate name (e.g. example-site-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL provided by Netlify when you first deployed your website. Click “Next.” 📷 Image Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate and copy the Tracking Code by returning the Google Analytics landing page and navigating to the Admin console. Select the Account and Property that were created in the previous steps. Under Property, click on Tracking Info &gt; Tracking Code. Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. 📷 Image Return to your RStudio Project where you are developing your website. Open the file config/_default/params.toml in the main directory and add a googleAnalytics parameter with your tracking code, as shown in this example. 2.7 Integrate Formspree The contact form on this demo website is powered by Formspree. Contact forms are a handy feature for collecting user feedback along with user emails. Formspree organizes and stores the responses to your contact form for you on their website. Follow the steps below to create a form “endpoint” and link it to the contact form on the demo website. Sign in to Formspree. Click “New Project” to create a new project for your website. 📷 Image. Click “New Form” to create a new contact form. 📷 Image Copy the form’s “endpoint.” 📷 Image Update the config/_default/params.toml file in the main webiste folder to update the contactFormAction parameter with your form endpoint, as shown in this example. 2.8 Push the website to GitHub Once your site is working locally, the next steps are to create a remote GitHub repository for your website, configure a local Git repository, and push your website files from your local environment to the remote repository. Follow these steps to create a remote GitHub repository and sync it to your local Git repository. Create a remote GitHub repository by signing in to GitHub and clicking “New” in the Repositories section. Configure the repository accordingly, then click Create repository. 📷 Image Create a local Git repository and associate it with the GitHub repository created in the previous step. To do this, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and running the following Git commands. # Change the directory to your website&#39;s root folder cd path/to/your/website/files # initialize local Git repo git init # add your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # point the local Git repo to the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 2.9 Deploy the website on Netlify Now that your website files are stored in your GitHub repository, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify account using your GitHub registration and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose the Github repository you configured in the previous steps. Leave the site settings alone and click “Deploy site” to publish your website. 📷 Image After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the domain name randomly generated by Netlify. 📷 Image. Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 2.10 Analyze Google Analytics data googleAnalyticsR is an R package for querying Google Analytics data. This topic is discussed in more detail in the chapter Analyzing traffic with Google Analytics. The R code below does the following: Load R packages for collecting and analyzing Google Analytics data Authenticate Google Analytics account List accounts and properties within your Google Analytics account, such as the ones associated with your newly created website Return a query of users by geographic location Plot a map of users by geographic location Note: The demo website created in the previous sections is not used in the following analysis because it has received no website traffic thus far. My personal website, Abnormal Distributions, is used instead. # R packages library(googleAnalyticsR) library(googleAuthR) library(dplyr) library(leaflet) # Authenticate your Google Analytics account ga_auth() # List your Google Analytics accounts ga_accounts &lt;- ga_account_list() # # Obtain the &quot;view Id&quot; associated with your website account view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) # Query geographic location of website users users_location &lt;- google_analytics( viewId = &quot;198103217&quot;, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) # Plot map of website users by location map_plot &lt;- users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) Map of Abnormal Distribtuions users by location map_plot 2.11 Closing thoughts The steps to create and publish a website presented in this chapter are discussed in greater detail in the following chapters. Start with the next chapter, Choosing a Hugo theme, to learn about choosing a website layout and style that aligns with your vision and goals for your website. If you like the look and feel of the website created in this chapter, keep using it! You would only need to make a few more edits including the favicon and any placeholder text. Optional edits include custom images, logos, font styles, color palettes, pages, and language translations. These edits are described in the chapter Curating the look, feel, and features. If you are interested in jumping straight into writing content (e.g. blog posts), learn how that works in the chapter Authoring content. "],["choose-theme.html", "Chapter 3 Choosing a Hugo theme 3.1 How it works 3.2 The 90/10 rule for themes 3.3 Generating websites from themes 3.4 Next steps", " Chapter 3 Choosing a Hugo theme This chapter provides some guidance on exploring website layouts and styles that inspire you, reflect your unique style, and achieve your website goals. Evaluating layouts and styles in a significant step in your website planning phase. A good theme that inspires you can have an enormous effect of unlocking your creativity and empowering you to author great content. 3.1 How it works Hugo, the static website generator upon which the websites in this book are based, is supported by an active developer community that has contributed dozens of beautiful, free, pre-built design themes for you to use in your own website project. Hugo themes are professionally designed, convenient, and fully functional out of the box. Hugo themes eliminate the need to design your own website layout and style from scratch, making professional websites accessible to quite literally anyone. Spend some time browsing the Hugo themes to see what is out there for you to use in your own website project. The steps required to generate a website with your preferred theme are discussed in the next chapter. 3.2 The 90/10 rule for themes The key to creating an attractive, high-performing, and sustainable website is to select a Hugo theme that contains 90% or more of the look, feel, and functionality you desire for your website. The remaining 10% of your website design can come from basic design tweaks such as colors, fonts, images, and adding/removing basic features. Unless you are (or want to be) a front end Hugo web developer, attempting too many changes to your favorite Hugo theme increases your risk of making poor decision decisions and negatively affecting your website’s overall look and performance. 3.2.1 Recommended themes Depending on your goals, you may be more or less restricted to certain Hugo themes. For example, if you intend to create content using R Markdown documents that feature code highlighting, tables, and interactive visualizations, then you may find that certain themes do a poor job of rendering these types of output. On the other hand, if you intend to create basic content using plain Markdown documents, you may not experience any content rendering issues with any of the themes you consider. Either way, you’ll likely go through a few rounds of trial and error before you settle on a theme that meets most or all of your needs. Tip: When browsing Hugo themes, pay attention to the date on which the theme was most recently updated. 📷 Image. It’s best to avoid themes that have not been updated in the last few months or so. Here are some themes that I recommend based on performance, content rendering, and personal style preference. Note that this is not an exhaustive list of all themes that I would recommend. Recommended themes for content created with Markdown Tranquilpeak - Modern, clean layout. Easy to customize and very readable. Great for personal websites, blogs, and portfolios. Anatole - Similar to Tranquilpeak with a more sophisticated About page. Eureka - Clean, professional layout. Easy to customize. Great for portfolios and professional landing pages. Blackburn - Clean layout. Easy to read and navigate. Great for personal websites, blogs, and portfolios. Beautiful Hugo - Crips, clean design. Great for personal websites, blogs, and portfolios. Recommended themes for other use cases Hargo and Vex - Modern e-commerce themes for advertising and selling products Doks - Modern documentation theme Bigspring - Modern design for small businesses offering a particular service Pico - Modern design for promoting yourself and your work Hugo Product Launch - Simple layout for promoting an upcoming product Hugo Scroll - Simple, highly visual layout for promoting your services or expertise 3.3 Generating websites from themes To generate a blogdown website from a chosen theme, follow these steps: Browse the list of Hugo themes. Click on a theme you like, then click “Demo” to explore a complete example. Once you find something you really like, click “Download” on the theme homepage to be taken to the source code in GitHub. 📷 Image. To create a website with your chosen theme, copy the user/theme-name in the GitHub URL. For example, if the source code is located at https://github.com/devcows/hugo-universal-theme, you’ll want to copy devcows/hugo-universal-theme. Follow the steps to generate a website described in the next chapter. 3.4 Next steps This chapter teaches you the basic steps to create, publish, and analyze your very own website. The following chapters explain this material in greater detail, helping you to understand some of the deeper technical aspects as well as the techniques for customizing your website. Continue on to the chapter Generating a blogdown website to get started. "],["generate.html", "Chapter 4 Generating a blogdown website 4.1 How it works 4.2 Use case 4.3 Generate your site in three steps 4.4 Serve the website locally 4.5 Next steps", " Chapter 4 Generating a blogdown website This chapter teaches you how to generate an initial website, the first and most influential step in your journey to owning your very own website. If you haven’t already, start by completing the following prerequisites: Install R Install RStudio My recommendation is to download the latest versions, which at the time of this writing are R 4.0 and RStudio 1.4. 4.1 How it works The R package blogdown in tandem with RStudio make it incredibly simple to generate your initial website. Under the hood, blogdown uses Hugo to generate static websites. Hugo websites are fast and developer-friendly, and Hugo developers have contributed a wide range of beautiful, free, pre-built design themes for you to use in your website project. 4.2 Use case This chapter, and all subsequent chapters, will build upon the default Hugo Anatole theme. The finished product can be seen here - https://r4sites-anatole-demo.netlify.app/ 4.3 Generate your site in three steps Follow these steps to generate a Hugo website using R and RStudio: Launch RStudio and install the blogdown package by running install.packages(\"blogdown\") in the R console. Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. 📷 Image. Configure the website to use the Anatole theme, as show in this example configuration. Make sure to set the Hugo theme: parameter to lxndrblz/anatole. Click Create Project to generate the website. 4.4 Serve the website locally The blogdown package includes a handy function called serve_site(). Running this function in the R console with your website’s RStudio Project loaded will render a local copy of your entire website in the RStudio “Viewer” pane, as shown in this example. The best part of this feature is that as you make and save changes to your website files, the local rendering will update in real-time and reflect your changes. This feature of blogdown, known as LiveReload, enables rapid trial and error on your local machine without ever having to leave the RStudio environment. 4.5 Next steps Continue on to the chapter Curating the look, feel, and features to learn how to customize the default theme to capture your personal style. "],["fine-tune.html", "Chapter 5 Fine tuning the look and feel 5.1 How it works 5.2 About CSS 5.3 About the Inspect tool 5.4 Use case 5.5 Before you begin 5.6 Update the base URL 5.7 Title, description, and author 5.8 Profile image 5.9 Favicon 5.10 Font style 5.11 Font sizes 5.12 Colors", " Chapter 5 Fine tuning the look and feel Now that you have generated a website using a default Hugo theme, this chapter teaches you how to edit the look and feel of your website and how to personalize certain features including fonts, colors, logos, page navigation, contact forms, and social media links. 5.1 How it works Recall that the types of static websites described in this book are simply a collection of text files including Markdown, HTML, CSS, and Javascript file types that Hugo compiles into a website. Therefore, changes to the look, feel, and features of your website are done simply by editing the relevant files and folders that make up your website. 5.2 About CSS If you are not familiar with CSS (Cascading Style Sheets), take a look at this CSS stylesheet. While HTML defines the general layout of a webpage, CSS is used to control the appearance of an HTML webpage and its elements including font styles, colors, buttons and links, positioning and dimensions of images, and so on. If you intend to alter the look and feel of your website, you will likely be spending most of your time editing your website’s primary CSS files. To learn more about CSS, visit w3schools for tutorials and read on to learn about the Inspect tool in your browser. 5.3 About the Inspect tool The “Inspect” tool in your browser is an essential tool for experimenting with changes to CSS and HTML directly in the browser. Using the Inspect tool results in temporary changes, and when the browser is refreshed the original properties are restored. Access this tool in the browser by right-clicking on any page element you want to edit (e.g. images, text, links, buttons) and click on “Inspect,” as shown in this example To learn more about the Inspect tool, I recommend watching this short video. 5.4 Use case For this chapter, we will focus on customizing the default Hugo Anatole. The finished product resulting from the following steps can be found here - https://r4sites-anatole.netlify.app/. To begin, [generate a website]](#generate-site) that uses the Anatole theme. For the best experience, make sure to run blogdown::serve_site() in the R console to preview a local copy of your current website. 5.5 Before you begin After you generate a website and before you begin making edits to your website’s features, prepare your RStudio environment by serving the site locally and opening a few important files. Serve the site locally In the R console, run blogdown::serve_site() to render a live, local copy of the website in the “Viewer” pane. As you make edits, your local copy will update in real-time. This will help you rapidly test changes to your website without having to leave the RStudio environment. To learn about serving the site locally, read this section. Open key files in RStudio Open the files listed below in RStudio to better prepare yourself for making edits. config.yaml config/_default/languages.toml config/_default/params.toml themes/anatole/assets/css/style.css Continue reading the following sections to make edits to your website’s features. 5.6 Update the base URL Navigate to config.yaml in the main directory and change the baseURL parameter from https://example.com to \"/\". The default example.com domain name is just a placeholder, but switching to \"/\" will instruct instruct Netlify to deploy your website behind your Netlify domain name. &lt;/&gt; Code This is a critical step to ensure your website and its dependencies are built and deployed properly. 5.7 Title, description, and author Change the title “My Blog” on the homepage by navigating to config/_default/languages.toml and changing the title parameter. &lt;/&gt; Code. Change the description “Call me Jane” on the homepage by navigating to config/_default/params.toml and editing the description parameter. &lt;/&gt; Code. Change the author “Jane Doe” by navigating to config/_default/params.toml and editing the author parameter. Doing this will change the title of your website as it appears in the web browser tab. &lt;/&gt; Code. 5.8 Profile image The profile image is the main image on the homepage with a circular border. To edit this, navigate to static/images/ and replace profile.jpg with your own image (&lt;/&gt; Code). If your image file is named profile.jpg, then no additional changes are needed. If not, navigate to config/_default/params.toml and edit the profilePicture paramater to point to your image. Note that your profile image does not have to be a headshot. It could be a logo or any other image. If your image appears too wide/narrow or too tall/short, navigate to themes/anatole/assets/css/style.css and edit the CSS properties. For this theme, you will need to edit the CSS properties here for narrow screen devices (&lt;/&gt; Code) and here for wide screen devices (&lt;/&gt; Code). 5.9 Favicon The favicon is the tiny image that appears in the web browser tab when you visit the website. Navigate to static/favicons/ and replace favicon.ico with your own favicon. If your favicon file is named favicon.ico, then no additional changes are needed. If not, navigate to config/_default/params.toml and change the favicon paramater to favicons/your_filename.ico. To create a favicon from an image, visit https://favicon.io/favicon-converter/. Keep the file named favicon.ico in the same folder. 5.10 Font style If you don’t like the default font, you can easily change it. I recommend select a font from Google Fonts. For this example, I will use the Noto Sans font. Follow the steps listed below to a Google Font. Locate and select your chosen font from from Google Fonts. Look at all of the available styles (e.g. Regular, Bold, Italic, etc.) and decide which styles you would like to import into your website. I recommend importing all available styles. To import all availalbe styles, select “+ Select this style” beside each style. 📷 Image Select the “@import” option under “Use on the web.” Copy the HTML code in between the style tags(📷 Image) and paste it into the main CSS file located at themes/anatole/assets/css/style.css (&lt;/&gt; Code). Under “use on the web,” locate the CSS rule for specifying font-family (📷 Image). In your main CSS file located at themes/anatole/assets/css/style.css, update all instances of font-family to change all font styles to your new font. Fortunately, the Anatole theme only specifies font-family in a single location. &lt;/&gt; Code. 5.11 Font sizes Overall, the Anatole uses quite small font sizes throughout. To change font sizes, locate the webpage element you want to modify using the Inspect tool in your browser. For the selected element, experiment with a font-size parameters (e.g. font-size: 20px). Once you are satisfied, edit the main CSS file located at themes/anatole/assets/css/style.css by adding the font-size property to the appropriate class. Below is a list of ideas for you to consider. Increase the font size of the p class, which essentially affects all text throughout the website. Change the font-size property from 14px to 16px or higher. &lt;/&gt; Code. Inrease the font size of the text in the navigation bar located at the top of the website when viewed on a wide screen. Change the font-size property for the .page-top .nav class from 12px to 16px or higher. For example, the increase the font size of the headline “I help people launch personal websites, blogs, and project portfolios” on the homepage, edit the font-size property for the .sidebar .logo-title .description class. &lt;/&gt; Code 5.12 Colors Other than static images, you can change the color of any webpage attribute. To change a color, locate the webpage element you want to modify using the Inspect tool in your browser and experiment with the color and background-color properties. Below is a list of ideas for you to consider regarding color changes. Social media icons: These are visible beneath the website title on the homepage. Open the main CSS file located at themes/anatole/assets/css/style.css and edit the .sidebar .social-links i class by specifying a color attribute. Here I have chosen to use the HEX color #6a92c5. &lt;/&gt; Code Post tags: These are visible on the homepage beneath post titles and summaries. Open the main CSS file located at themes/anatole/assets/css/style.css and edit the .post .post-footer .meta a class and editing thecolor attribute. Here I have chosen to use the HEX color #6a92c5. &lt;/&gt; Code "],["pages-features.html", "Chapter 6 Configuring pages and features 6.1 Rename pages 6.2 Delete pages 6.3 Update the About page 6.4 Delete default posts 6.5 Delete language translations 6.6 Configure contact forms 6.7 Customizing contact forms", " Chapter 6 Configuring pages and features Now that you have generated a website and (optionally) tuned the look and feel, this chapter teaches you how to configure, update, and delete certain features that are unlikely to be updated very frequently. These features include page names, the About page, default posts, language translations, and contact forms. 6.1 Rename pages The Hugo Anatole theme comes with the following pages by default: Home, Posts, About, and Contact. To rename these pages, open config/_default/menus.en.toml and edit the name parameters accordingly. For example, rename the “About” page to “About Me” to clearly communicate that this page contains your personal biography. &lt;/&gt; Code 6.2 Delete pages To delete a page, open config/_default/menus.en.toml and delete all references to the page you want to delete. For example, to delete the Contact page, delete lines 19-23 in the menus.en.toml file. &lt;/&gt; Code 6.3 Update the About page The Hugo Anatole theme comes with a default About page. To edit the About page, navigate to content/english/about.md. Replace the metadata (i.e. the parameters in between the --- markers) then replace the body of the document using plain Markdown. &lt;/&gt; Code. 6.4 Delete default posts The Hugo Anatole theme comes with several default posts. To delete all default posts, navigate to the content/english/post folder and delete all files and folders except _index.md. &lt;/&gt; Code 6.5 Delete language translations By default, the Anatole theme supports English and Arabic language translations. To remove all content for a given translation, complete the following steps. Delete the file config/_default/menus.TRANSLATION.toml. Edit the file config/_default/languages.toml by removing all references to the appropriate language parameters. &lt;/&gt; Code Delete the folder content/TRANSLATION/ and all of its contents. 6.6 Configure contact forms Contact forms are a feature of the default Hugo Anatole theme, though they are not a feature of all Hugo themes. Contact forms are handy for collecting user emails and soliciting feedback from your website visitors. The contact form on the Contact page of the default Hugo Anatole theme is powered by Formspree. Formspree is not the only contact form provider, though it seems many Hugo themes integrate Formspree. Formspree’s web app offers a user-friendly interface for creating and managing contact forms, viewing form submissions, and exporting user data in CSV format. If you ever want to do a “subscriber only” email campaign, contact forms are a great option for collecting emails. Follow the steps below to create a Formspree form “endpoint” and link it to the contact form on your website. Sign in to Formspree. Click “New Project” to create a new project for your website. 📷 Image. Click “New Form” to create a new contact form. 📷 Image Copy the form’s “endpoint” beginning with https://. 📷 Image Open config/_default/params.toml in the main webiste folder, uncomment the contactFormAction parameter, and insert the form endpoint. &lt;/&gt; Code. Viewing your form submissions Once your contact form endpoint is configured, submissions to your contact form can be viewed in your Formspree account. Sign in to Formspree, locate your form, and select “Submissions” to view and (optionally) export your submissions. 📷 Image 6.7 Customizing contact forms The contact form on the default Hugo Anatole theme includes fields for Name, Email, and Message. These defaults are likely to work for most use cases, however it is possible to create new fields. To edit the contact form on the Hugo Anatole theme, open themes/anatole/layouts/partials/contact.html and themes/anatole/i18n/en.toml in the RStudio editor. To add a new field to the contact form, such as an optional “Job Title” field, update the contact.html file with a new input (&lt;/&gt; Code) and update the i18n/en.toml file with an associated placeholder text value (&lt;/&gt; Code). "],["content.html", "Chapter 7 Authoring content 7.1 Create new posts using R Markdown 7.2 Example posts 7.3 Tips for writing posts", " Chapter 7 Authoring content This chapter provides some general guidance on creating content, such as blog posts and portfolio entries, using R Markdown. 7.1 Create new posts using R Markdown The Posts page is the place to show off your work. This is where you can include your blog posts, tutorials, research articles, project descriptions, or other creative content. New posts can be authored using either R Markdown documents or plain Markdown. However, my recommendation is to always opt for R Markdown. R Markdown is very similar to plain Markdown except it supports R, Python, and SQL code and renders its output (e.g. tables, graphs). Therefore, R Markdown is substantially more flexible than plain Markdown for writing technical content containing code, tables, and data visualizations. To learn more about R Markdown, I recommend reading R Markdown: The Definitive Guide. Creating a new R Markdown post using RStudio The simplest way to add a new post is via the “New post” RStudio Addin. Follow the steps below to create a new post using this approach. Select the RStudio Addin labeled “New post.” 📷 Image. Configure the new post by specifying the post Title, Author, Date, Subdirectory, Categories, Tags, and Format. Be sure to place the new post in the post Subdirectory and set the Format to R Markdown (.Rmd). 📷 Image. 7.2 Example posts To learn how I prefer to structure my R Markdown posts, take a look at the source code for the sample posts on the Posts page of our customized Hugo Anatole website. Sample post - Interactive tables and graphs in R Sample post - Using Python in R Markdown Sample post - Using SQL in R Markdown Sample post - Basic Markdown syntax 7.3 Tips for writing posts Add a table of contents Adding a table of contents to your R Markdown post is highly recommended to enable a better user experience. To add a table of contents, edit the output: parameter in the R Markdown metadata as shown below. &lt;/&gt; Code Note this will also add code highlighting using the tango option. output: blogdown::html_page: highlight: tango toc: true Add code highlighting Using the example above, add code highlighting to improve the readability of your code snippets by populating the highlight parameter. Though I recommend the tango highlighting scheme, other options options are available. output: blogdown::html_page: highlight: tango toc: true Add tags and categories When creating new posts, think carefully about the Tags and Categories you attach to your post. Tags and Categories help with sorting and grouping your content, and they give gives Google crawlers an idea of what your blog post is about. According to this webiste, strive to attach 5-10 Categories and 5-10 Tags to each post to add just enough detail without confusing your readers. "],["deploy.html", "Chapter 8 Deploying on Netlify 8.1 How it works 8.2 Upload files to GitHub 8.3 Configure Netlify for deployment 8.4 Updating your website 8.5 Purchasing a custom domain name", " Chapter 8 Deploying on Netlify This chapter describes a simple, repeatable approach to putting your website on the internet. If you haven’t already, complete the following prerequisites. Create your blogdown website and (optionally) add some content Install Git Sign up for GitHub Sign up for Netlify 8.1 How it works Hugo (the static site generator used by blogdown), GitHub, and Netlify are the three tools that make it incredibly simple to deploy your website to the internet. The main steps are to upload your website files to a remote GitHub repository, then create a new site in Netlify that points to your GitHub repository URL. Netlify will then do all of the heavy lifting of building and deploying your Hugo website to the internet. All of this can be done in a matter of minutes with just a few lines of code and a few clicks. 8.2 Upload files to GitHub Once your website is working locally, the next steps are to create a remote GitHub repository for your website files, configure a local Git repository, and push your website files from your local Git repository to your remote GitHub repository. Follow these simple steps to make this happen: Sign in to GitHub and create a new repository by clicking “New” in the Repositories section. Configure the repository accordingly, then click “Create repository.” 📷 Image On your local machine, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and run the following Git commands to sync a local Git repository with your newly created remote GitHub repository. # Change the directory to your website&#39;s root folder cd path/to/your/website # initialize local Git repo git init # add all of your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # sync the local Git repo with the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 8.3 Configure Netlify for deployment Now that your website files are stored in GitHub, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose your website’s GitHub repository. Leave the site settings alone and click “Deploy site” to publish your website. 📷 Image After a few seconds, your website will be deployed on Netlify. To view your website on the internet, return to the Site Overview section and locate the default domain name generated by Netlify (📷 Image). Change your website’s domain name (part of it at least). Default Netlify domain names tend to look something like this - https://dazzling-khorana-a6a8fe.netlify.app. To change this, go to Site settings &gt; Change site name. Note that the domain extension is .netlify.app until you (optionally) purchase a custom domain name. 8.4 Updating your website To update the published version of your website, simply push your changes from your local environment to your GitHub repository. Netlify will detect the update to your GitHub repository and immediately proceed with publishing the latest version of your website. Assuming you have already pushed a version of your website to GitHub, use the add &gt; commit &gt; push Git workflow to push your updates to GitHub. 📷 Image # add all files to the local Git repo git add --all # commit files and include a brief message git commit -m &quot;brief message describing your changes&quot; # push files to GitHub git push origin master 8.5 Purchasing a custom domain name Netlify’s default domain names end with .netlify.app. If you don’t care for this domain extension, you can purchase a custom domain for your website. Though several domain registrars exist, the simplest route is to purchase a domain name through Netlify. If you use a domain registrar other than Netlify (e.g. Google Domains), you will have to manually configure Domain Name Servers and Domain Name System settings. With Netlify, all of this is taken care of for you. Follow the simple steps below to purchase a custom domain through Netlify: Log in to Netlify, open your site, and click on “Domain settings.” 📷 Image. Under Custom domains, click “Add custom domain.” Search for a domain name you like, then click “Verify” to determine if the domain is already owned or available for purchase. If available, confirm the purchase with a credit card and (optionally) set the domain name to auto-renew annually. 📷 Image. Enable IPv6 to reach areas of the world where connectivity via IPv4 is not possible. Do this by signing in to Netlify and navigating to Team overview &gt; Domains, select your custom domain name, and click “Enable IPv6 on your domain.” 📷 Image. "],["google-analytics.html", "Chapter 9 Analyzing traffic with Google Analytics 9.1 How it works 9.2 Setting up Google Analytics 9.3 Analyzing traffic using googleAnalyticsR 9.4 Closing thoughts", " Chapter 9 Analyzing traffic with Google Analytics This chapter shows you how to integrate Google Analytics into your website to capture data on your website users including the number of users, the pages they view, the sources from which they arrive at your website, and their geographic locations. This chapter covers the basics of the googleAnalyticsR R package for querying your Google Analytics data from R. If you haven’t already, complete the minimum prerequisites listed below: Generate a website Deploy your site on Netlify Sign up for Google Analytics 9.1 How it works Once you sign up for Google Analytics, the main objectives are to create an Account and a Property for your website domain name, then obtain a Tracking ID. This tracking code will go in the config.yaml file on your website, which in turn will instruct Google Analytics to collect the data on user traffic to your website. 9.2 Setting up Google Analytics Follow these steps to integrate Google Analytics into your website: Sign in to Google Analytics and navigate to Admin &gt; Create Account. 📷 Image Under Account setup, provide an appropriate name (e.g. personal-website) and configure the Account Data Sharing Settings to your liking. The defaults should be fine. Click “Next.” Under Property setup, provide an appropriate name (e.g. personal-website-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL to your website. Click “Next.” 📷 Image Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate the Tracking ID by returning back to the Admin console and selecting the Account and Property that were created in the previous steps. Important: Make sure you locate the Universal Analytics property that reads property name (UA-XXXXXXX-X) and not the GA4 property. Under Property, click on Tracking Info &gt; Tracking Code (📷 Image). Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. 📷 Image Return to your RStudio Project where you are developing your website. Open the file config.yaml in the main directory and locate the googleAnalytics: parameter. Depending on the theme, this parameter may be written or spelled slightly differently. Paste your Google Analytics Tracking ID here, e.g. googleAnalytics: 'UA-XXXXXXXXX-1'. 📷 Image. Push your changes to your GitHub repository to complete the Google Analytics integration. 9.3 Analyzing traffic using googleAnalyticsR googleAnalyicsR is an R package for analyzing Google Analytics data stemming from traffic to your website. 9.3.1 Dimensions and metrics In order to analyze your Google Analytics data, you need to gain a basic understand of Dimensions and Metrics. Dimensions are attributes of your data and Metrics are quantitative measurements. For example, to analyze the count of users on your website in the last 60 days, the Dimension is date and the Metric is users. Google Analytics supports hunderds of Dimension-Metric combinations. My recommendation is to browse Ultimate Google Analytics Dimensions and Metrics List to learn what is available. Also check out the Practical Tips page written by the author of the googleAnalyticsR package. 9.3.2 Install googleAnalyticsR install.packages(&quot;googleAnalyticsR&quot;, dependencies = TRUE) 9.3.3 R packages for data analytics library(googleAnalyticsR) ## calling Google Analytics API library(dplyr) ## data manipulation library(plotly) ## interactive charts library(DT) ## interactive tables library(leaflet) ## interactive maps 9.3.4 Authenticate your Google Analytics account Running ga_auth() in the R console will automatically open a page in your web browser and prompt you to authenticate your Google account. googleAnalyticsR::ga_auth() 9.3.5 List your Google Analytics accounts and properties Running ga_account_list() will list the Google Analytics account that was created in step 1 of Setting up Google Analytics. ## get your accounts ga_accounts &lt;- ga_account_list() ga_accounts ## # A tibble: 2 x 10 ## accountId accountName internalWebPrope… level websiteUrl type webPropertyId ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 143402170 abndistro 204792927 STAN… http://abnd… WEB UA-143402170… ## 2 143402170 abndistro 269232613 STAN… https://www… WEB UA-143402170… ## # … with 3 more variables: webPropertyName &lt;chr&gt;, viewId &lt;chr&gt;, viewName &lt;chr&gt; 9.3.6 Obtain viewId associated with your website To send API calls to Google Analytics, you need to obtain the viewId associated with the account. view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) print(view_id) ## [1] &quot;198103217&quot; 9.3.7 Daily count of website users To query the count of website users over a given date range, use the following Dimension and Metric. Dimension: date Metric: users daily_users &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-07-01&quot;, &quot;2019-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;date&quot; ) %&gt;% as_tibble() plot_ly( data = daily_users, x = ~date, y = ~users, mode = &quot;lines&quot; ) %&gt;% layout(title = &quot;Daily count of website between June 2019 and December 2019&quot;) 9.3.8 Users by device type To understand which device types your users are using to view your website, use the following Dimension and Metric. Dimension: deviceCategory Metric: users users_by_device_type &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2019-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;deviceCategory&quot; ) %&gt;% as_tibble() plot_ly( data = users_by_device_type, x = ~deviceCategory, y = ~users, type = &quot;bar&quot; ) %&gt;% layout(title = &quot;Users by device type&quot;) 9.3.9 Page views by page To measure the number of page views to each of your website pages, use the following Dimension and Metric. Dimension: pageTitle Metric: pageviews page_views &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;pageviews&quot;, dimensions = &quot;pageTitle&quot; ) %&gt;% as_tibble() page_views %&gt;% arrange(desc(pageviews)) %&gt;% DT::datatable() 9.3.10 Users by location To understand the geographical areas from which your webiste users view your webiste, use the following Dimension sand Metric. Dimensions: latitude, longitude Metric: users users_location &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) 9.3.11 Avoiding data sampling The google_analytics() function has an argument named anti_sampling, which is set to TRUE by default. This means that queries which return more than 1,000 rows of data will be sampled to avoid putting strain on the Google Analytics API. To avoid this default sampling strategy, set anti_sampling = FALSE when making API calls via the google_analytics() function. 9.4 Closing thoughts Google Analytics is a complex topic which cannot be covered in its entirety in this book. For most, having a basic understanding of the available Google Analytics Dimensions and Metrics should provide a solid foundation for interesting data analytics. "],["extras.html", "Chapter 10 Extras 10.1 Stop, build, serve site 10.2 HTML color picker", " Chapter 10 Extras 10.1 Stop, build, serve site 10.2 HTML color picker "]]
