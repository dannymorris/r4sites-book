[["style.html", "Chapter 4 Styling your website 4.1 How it works 4.2 Word of caution 4.3 Selecting a Hugo theme 4.4 Generating websites from themes 4.5 Editing your theme 4.6 Closing thoughts on themes", " Chapter 4 Styling your website This chapter provides some tips and tricks for designing the look and feel of your website to reflect your personal style and achieve your goals. 4.1 How it works Hugo, the static website generator used by blogdown, is supported by an active developer community that has contributed dozens of beautiful, free, pre-built design themes for you to use in your website project. Spend some time browsing the Hugo themes to see what is out there. To use a theme, locate the theme’s GitHub URL. Then, simply edit the Hugo theme: parameter when configuring a new blogdown website. These steps are explained in the following sections. 4.2 Word of caution Styling the look and feel of your website is a signficant opportunity to be creative and artistic, but it can be a major pitfall if you’re not careful. The key to creating an appealling, sustainable website design is to select a Hugo theme that contains 90% or more of the look, feel, and functionality you desire for your website. The remaining 10% of your design can come from basic design tweaks such as colors, fonts, and images. Unless you are (or want to be) an expert in front end web development, attempting too many design changes increases your risk of making poor decision decisions and negatively affecting your website’s look and performance. Additionally, website design is highly personal and subjective. There are no rules or requirements. My goal with this chapter is to steer you towards some designs that I have found to be attractive, flexible, and sustainable, and to also empower you to discover new designs that are better suited to you and your goals. 4.3 Selecting a Hugo theme The look and feel of your website is largely determined by which Hugo theme you choose. Hugo themes are created by experts in Hugo and front end web design. Spend some times browsing the list of themes and checkout the demo sites (example). If you see a theme you like, try it out by creating a new site using your chosen theme. Otherwise, continue reading for recommendations regarding themes. 4.3.1 Recommended themes Depending on your goals, you may be more or less restricted to certain Hugo themes. For example, if you intend to create content using R Markdown documents that feature code highlighting, tables, and interactive visualizations, then you may find that certain themes do a poor job of rendering these types of output. On the other hand, if you intend to create basic content using plain Markdown documents, you may not experience any content rendering issues with any of the themes you consider. Either way, you’ll likely go through a few rounds of trial and error before you settle on a theme that meets most or all of your needs. Tip: When browsing Hugo themes, pay attention to the date on which the theme was most recently updated. Example. It’s best to avoid themes that have not been updated in the last few months or so. Here are some themes that I recommend based on performance, content rendering, and personal style preference. Note that this is not an exhaustive list of all themes that I would recommend. Recommended themes for content written in R Markdown Cupper - Simple, clean, readable, minimalist. Great for portfolios and writing. Tranquilpeak - Modern, clean layout. Easy to customize and very readable. Great for personal websites, blogs, and portfolios. Anatole - Similar to Tranquilpeak with a more sophisticated About page. Eureka - Clean, professional layout. Easy to customize. Great for portfolios and professional landing pages. Recommended themes for content written in standard markdown Hargo and Vex - Modern e-commerce themes for advertising and selling products Doks - Modern documentation theme Bigspring - Modern design for small businesses offering a particular service Pico - Modern design for promoting yourself and your work Hugo Product Launch - Simple layout for promoting an upcoming product Hugo Scroll - Simple, highly visual layout for promoting your services or expertise 4.4 Generating websites from themes To generate a blogdown website from a chosen theme, follow these steps: Browse the list of Hugo themes. Click on a theme you like, then click “Demo” to explore a complete example. Once you find something you really like, click “Download” on the theme homepage to be taken to the source code in GitHub. Example. To create a website with your chosen theme, copy the user/theme-name in the GitHub URL. For example, if the source code is located at https://github.com/devcows/hugo-universal-theme, you’ll want to copy devcows/hugo-universal-theme. Follow the steps to generate a website described in the previous chapter. This time, use the information from step 3 to edit the Hugo theme: parameter. For example, replace yihui/hugo-lithium with devcows/hugo-universal-theme to use your chosen theme. 4.5 Editing your theme In all likelihood, you will want to edit some aspects of the theme to alter the look and feel of your website. It’s important to note that theme developers do not follow the exact same approach as other developers when designing a theme. Therefore, there is no universal approach to editing themes. There are, however, some common approaches to editing basic characteristics such as colors, font styles, logos, and so on. Those will be described in this section. 4.5.1 Use case To keep things simple, we will focus on a use case that revolves around tweaking the Anatole theme. To begin, follow the instructions outlined in Generating websites from themes. Then, follow along with the steps below. The theme’s demo website can be found here - https://themes.gohugo.io/theme/anatole/. The finished product resulting from the following steps can be found here - https://r4sites-anatole.netlify.app/. 4.5.2 Using the browser’s Inspect tool The “Inspect” tool in your browser is an essential tool for experimenting with design changes directly in the browser. Access this tool in the browser by right-clicking on the page element you want to edit (e.g. image, text, link) and click on “Inspect.” Example 4.5.3 Serve the site locally Once you have generated a website using the Anatole theme, run blogdown::serve_site() in the R console from within your RStudio Project to render a live, local copy of the website. To learn about serving the site locally, read this section. 4.5.4 Edit the title The title of the Anatole demo website is “My Blog.” To change this to something more personal, navigate to config/_default/languages.toml and edit the title parameter. Example. 4.5.5 Edit the description The description of the Anatole demo website, appearing beneath the website title, is “Call me Jane.” To change this, navigate to config/_default/params.toml and edit the description parameter. Example. 4.5.6 Edit links to social media Navigate to config/_default/params.toml and edit the links to your social medial accounts beginning on line 40. Example 4.5.7 Edit the profile image The profile image is the main image on the homepage with a circular border. To edit this, navigate to static/images/ and replace profile.jpg with your own image (example). Keep the file named profile.jpg so the theme will recognize your image. If your image appears too wide/narrow or too tall/short, navigate to themes/anatole/assets/css/style.css and edit the CSS properties. For this theme, you will need to edit the CSS properties here for narrow screen devices and here for wide screen devices. 4.5.8 Edit the favicon Navigate to static/favicons/ and replace favicon.ico with your own favicon. The favicon is the tiny image that appears in the web browser tab for your website. To create a favicon from an image, visit https://favicon.io/favicon-converter/. Keep the file named favicon.ico in the same folder. 4.5.9 Edit the font If you don’t like the default font, you can easily change it. For example, to use the Google Font Quicksand insert this line of code in the themes/anatole/layouts/partials/head.html file. Then, navigate to themes/anatole/assets/css/style.css and change the font property in the body element (example). You can also change basic font properties (e.g. size, color), but you will have to know what CSS class to change. Examples include p(example), .page-top .nav(example), and .page-top .nav a(example). 4.5.10 Edit colors 4.5.11 Remove language translation (optional) Remove all content supporting a language translation. By default, the Anatole theme supports an Arabic language translation. To remove all content supporting this translation, delete the file config/_default/menus.ar.toml, edit the file config/_default/languages.toml by removing all Arabic language parameters (example), then delete the folder content/arabic/ and all of its contents. 4.6 Closing thoughts on themes Relying on themes is the quickest way to launch a website that looks and functions great. Editing the look and feel of your website can be a lot of fun, but you must be careful not to go overboard. Here are some tips to keep in the back of your mind while you’re editing your theme: Before you make any edits, go ahead and run blogdown::serve_site() in the R console within the RStudio Project. This will launch your website locally and will update automatically whenever edits are detected. Whenever you make a change, check the result on wide and narrow screens. You can do this with the browser on your desktop by maximizing the browser width (wide screen) and decreasing the width to mimic a mobile device (narrow screen). Try not to edit the theme’s default layout. Instead, focus on colors, font, images, and content to reflect you personal style. After you make a change, carefully scrutinize the result and look for any unexpected consequences. "]]
