[["complete-end-to-end-example.html", "Chapter 2 Complete end-to-end example 2.1 How it works 2.2 Install software 2.3 Create accounts 2.4 Generate the website 2.5 Make some edits 2.6 Integrate Google Analytics 2.7 Integrate Formspree 2.8 Push the website to GitHub 2.9 Deploy the website on Netlify 2.10 Closing thoughts", " Chapter 2 Complete end-to-end example The purpose of this chapter is to inspire you with an example and to expose you to the entire process of creating, publishing, and analyzing your very own website. If you complete the steps described below, you will end up with this final product. If you like the look and feel of this final product, then all you need to do afterwards is personalize it (e.g. add your own profile image) and author content. These topics are described in the following chapters. 2.1 How it works The steps to create, publish, and analyze your very own personal website include: Install free software and create free accounts Generate the website using RStudio and the blogdown R package Make some basic edits to placeholder text Integrate Google Analytics to collect user traffic Integrate Formspree to power the contact form Push the website files to GitHub Deploy the live website on Netlify 2.2 Install software Start off by installing these free, open source tools if you haven’t already. My recommendation is to download the latest versions, which at the time of this writing are R 4.0, RStudio 1.4, Git 2.31.1. R RStudio Git 2.3 Create accounts Create free accounts with GitHub, Netlify, Google Analytics, and Formspree. Start with GitHub first, then use your GitHub registration to sign up for a Netlify account. To sign up for Google Analytics, click the link below and locate “Start for free” on the landing page. GitHub Netlify Google Analytics Formspree 2.4 Generate the website blogdown makes it super easy to generate a website that uses Hugo. Follow the steps below to create a website on your local machine. Launch RStudio and install the blogdown package by running install.packages(\"blogdown\"). Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. Example. Using the New Project Wizard, generate a website using the Hugo Anatole theme by defining Hugo theme: lxndrblz/anatole in the configuration. Click Create Project to generate the website. Example. Confirm that everything is working properly by running blogdown::serve_site() in the R console. A local, live, and fully functional preview of your website will appear in the Viewer pane in RStudio. Example. 2.5 Make some edits You will notice that the default Anatole theme contains placeholder text such as “My Blog” and “Call me Jane” on the homepage below the profile image. Follow the steps below to edit these placeholders. Change “My Blog” on the homepage by navigating to config/_default/languages.toml and changing the title parameter. Example. Change “Call me Jane” on the homepage by navigating to config/_default/params.toml and editing the title parameter. While you’re here, feel free to change other parameters including description, profilePicture, and social media links. Example. 2.6 Integrate Google Analytics Integrate Google Analytics into your website to collect and analyze user traffic. If you haven’t already, be sure to create a free Google Analytics account, then follow the steps below. Sign in to Google Analytics and navigate to Admin &gt; Create Account. Example Under Account setup, provide an appropriate name (e.g. my-example-site) and configure the Account Data Sharing Settings to your liking. Click “Next.” Under Property setup, provide an appropriate name (e.g. example-site-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL provided by Netlify when you first deployed your website. Click “Next.” Example Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate and copy the Tracking Code by returning the Google Analytics landing page and navigating to the Admin console. Select the Account and Property that were created in the previous steps. Under Property, click on Tracking Info &gt; Tracking Code. Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. Example Return to your RStudio Project where you are developing your website. Open the file config/_default/params.toml in the main directory and add a googleAnalytics parameter with your tracking code, as shown in this example. 2.7 Integrate Formspree The contact form on this demo website is powered by Formspree. Contact forms are a handy feature for collecting user feedback along with user emails. Formspree organizes and stores the responses to your contact form for you on their website. Follow the steps below to create a form “endpoint” and link it to the contact form on the demo website. Sign in to Formspree. Click “New Project” to create a new project for your website. Example. Click “New Form” to create a new contact form. Example Copy the form’s “endpoint.” Example Update the config/_default/params.toml file in the main webiste folder to update the contactFormAction parameter with your form endpoint, as shown in this example. 2.8 Push the website to GitHub Once your site is working locally, the next steps are to create a remote GitHub repository for your website, configure a local Git repository, and push your website files from your local environment to the remote repository. Follow these steps to create a remote GitHub repository and sync it to your local Git repository. Create a remote GitHub repository by signing in to GitHub and clicking “New” in the Repositories section. Configure the repository accordingly, then click Create repository. Example Create a local Git repository and associate it with the GitHub repository created in the previous step. To do this, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and running the following Git commands. # Change the directory to your website&#39;s root folder cd path/to/your/website/files # initialize local Git repo git init # add your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # point the local Git repo to the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 2.9 Deploy the website on Netlify Now that your website files are stored in your GitHub repository, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify account using your GitHub registration and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose the Github repository you configured in the previous steps. Leave the site settings alone and click “Deploy site” to publish your website. Example After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the domain name randomly generated by Netlify. Example. Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 2.10 Closing thoughts The steps to create and publish a website presented in this chapter are discussed in greater detail in the following chapters. Start with the next chapter, Choosing a Hugo theme, to learn about choosing a website layout and style that aligns with your vision and goals for your website. If you like the look and feel of the website created in this chapter, keep using it! You would only need to make a few more edits including the favicon and any placeholder text. Optional edits include custom images, logos, font styles, color palettes, pages, and language translations. These edits are described in the chapter Curating the look, feel, and features. If you are interested in jumping straight into writing content (e.g. blog posts), learn how that works in the chapter Authoring content. "]]
