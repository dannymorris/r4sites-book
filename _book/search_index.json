[["complete-end-to-end-example.html", "Chapter 2 Complete end-to-end example 2.1 How it works 2.2 Install software 2.3 Create accounts 2.4 Generate the website 2.5 Make some edits 2.6 Integrate Google Analytics 2.7 Integrate Formspree 2.8 Push the website to GitHub 2.9 Deploy the website on Netlify 2.10 Analyze Google Analytics data 2.11 Closing thoughts", " Chapter 2 Complete end-to-end example This chapter exposes you to the entire methodology to create, publish, and analyze websites through a quick example. If you complete the steps described in this chapter, you will end up with this basic website. Later chapters build upon this this basic website to create this customized version. 2.1 How it works The steps to create, publish, and analyze your very own personal website include the following: Install free software and create free accounts Generate the website using RStudio and the blogdown R package Make some basic edits to placeholder text Integrate Google Analytics to collect user traffic Integrate Formspree to power the contact form Push the website files to GitHub Deploy the live website on Netlify 2.2 Install software Start off by installing these free, open source tools if you haven‚Äôt already. My recommendation is to download the latest versions, which at the time of this writing are R 4.0, RStudio 1.4, Git 2.31.1. R RStudio Git 2.3 Create accounts Create free accounts with GitHub, Netlify, Google Analytics, and Formspree. Start with GitHub first, then use your GitHub registration to sign up for a Netlify account. To sign up for Google Analytics, click the link below and locate ‚ÄúStart for free‚Äù on the landing page. GitHub Netlify Google Analytics Formspree 2.4 Generate the website blogdown makes it super easy to generate a website that uses Hugo. The steps to create a website on your local machine include: Launch RStudio and install the blogdown package by running install.packages(\"blogdown\"). Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. üì∑ Image. Using the New Project Wizard, generate a website using the Hugo Anatole theme by defining Hugo theme: lxndrblz/anatole in the configuration. Click Create Project to generate the website. üì∑ Image. Confirm that everything is working properly by running blogdown::serve_site() in the R console. A local, live, and fully functional preview of your website will appear in the Viewer pane in RStudio. üì∑ Image. 2.5 Make some edits You will notice that the default Anatole theme contains placeholder text such as ‚ÄúMy Blog‚Äù and ‚ÄúCall me Jane‚Äù on the homepage below the profile image. The steps to edit these placeholder examples include: Change ‚ÄúMy Blog‚Äù on the homepage by navigating to config/_default/languages.toml and changing the title parameter. &lt;/&gt; Code. Change ‚ÄúCall me Jane‚Äù on the homepage by navigating to config/_default/params.toml and editing the title parameter. While you‚Äôre here, feel free to change other parameters including description, profilePicture, and social media links. &lt;/&gt; Code. 2.6 Integrate Google Analytics Integrate Google Analytics into your website to collect and analyze user traffic. If you haven‚Äôt already, be sure to create a free Google Analytics account, then proceed with the following steps: Sign in to Google Analytics and navigate to Admin &gt; Create Account. üì∑ Image Under Account setup, provide an appropriate name (e.g.¬†my-example-site) and configure the Account Data Sharing Settings to your liking. Click ‚ÄúNext.‚Äù Under Property setup, provide an appropriate name (e.g.¬†example-site-property). Under Property setup, click on ‚ÄúShow advanced options‚Äù to create a Universal Analytics property. For the Website URL, provide the URL provided by Netlify when you first deployed your website. Click ‚ÄúNext.‚Äù üì∑ Image Under About you business, configure the settings to your liking. Click ‚ÄúNext‚Äù and accept the terms of service. Locate and copy the Tracking Code by returning the Google Analytics landing page and navigating to the Admin console. Select the Account and Property that were created in the previous steps. Under Property, click on Tracking Info &gt; Tracking Code. Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. üì∑ Image Return to your RStudio Project where you are developing your website. Open the file config/_default/params.toml in the main directory and add a googleAnalytics parameter with your tracking code, as shown in this example. 2.7 Integrate Formspree The contact form on this demo website is powered by Formspree. Contact forms are a handy feature for collecting user emails and feedback from your users. Formspree organizes and stores the responses to your contact form for you on their website. The steps below to create a form ‚Äúendpoint‚Äù and link it to the contact form on the demo website include the following: Sign in to Formspree. Click ‚ÄúNew Project‚Äù to create a new project for your website. üì∑ Image. Click ‚ÄúNew Form‚Äù to create a new contact form. üì∑ Image Copy the form‚Äôs ‚Äúendpoint.‚Äù üì∑ Image Update the config/_default/params.toml file in the main webiste folder to update the contactFormAction parameter with your form endpoint, as shown in this example. 2.8 Push the website to GitHub Once your site is working locally, the next steps are to create a remote GitHub repository for your website, configure a local Git repository, and push your website files from your local environment to the remote repository. The steps to create a remote GitHub repository and sync it to your local Git repository include the following: Create a remote GitHub repository by signing in to GitHub and clicking ‚ÄúNew‚Äù in the Repositories section. Configure the repository accordingly, then click Create repository. üì∑ Image Create a local Git repository and associate it with the GitHub repository created in the previous step. To do this, launch Git from the command line (e.g.¬†Git Bash on Windows, Terminal on Mac/Linux) and running the following Git commands. # Change the directory to your website&#39;s root folder cd path/to/your/website/files # initialize local Git repository git init # add your website files to the local Git repository git add --all # commit your website files to the local Git repository git commit -m &quot;first commit&quot; # point the local Git repository to the remote GitHub repository # change your_username and your_repo to your GitHub username and repository name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 2.9 Deploy the website on Netlify Now that your website files are stored in your GitHub repository, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repository, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. The steps to deploy your website on Netlify include the following: Log in to Netlify account using your GitHub registration and click ‚ÄúNew site from Git.‚Äù Select GitHub as the Continuous Deployment provider, then choose the GitHub repository you configured in the previous steps. Leave the site settings alone and click ‚ÄúDeploy site‚Äù to publish your website. üì∑ Image After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the domain name randomly generated by Netlify. üì∑ Image. Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 2.10 Analyze Google Analytics data googleAnalyticsR is an R package for querying Google Analytics data. This topic is discussed in more detail in the chapter Analyzing traffic with Google Analytics. The following R code performs the following tasks: Load R packages for collecting and analyzing Google Analytics data Authenticate Google Analytics account List accounts and properties within your Google Analytics account, such as the ones associated with your newly created website Return a query of users by geographic location Plot a map of users by geographic location Note: The demo website created in the previous sections is not used in the following analysis because it has received no website traffic thus far. My personal website, Abnormal Distributions, is used instead. # R packages library(googleAnalyticsR) library(googleAuthR) library(dplyr) library(leaflet) # Authenticate your Google Analytics account ga_auth() # List your Google Analytics accounts ga_accounts &lt;- ga_account_list() # # Obtain the &quot;view Id&quot; associated with your website account view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) # Query geographic location of website users users_location &lt;- google_analytics( viewId = &quot;198103217&quot;, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) # Plot map of website users by location map_plot &lt;- users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) Map of Abnormal Distributions users by location map_plot 2.11 Closing thoughts The steps to create and publish a website presented in this chapter are discussed in greater detail in the following chapters. Start with the next chapter, Choosing a Hugo theme, to learn about choosing a website layout and style that aligns with your vision and goals for your website. If you like the look and feel of the website created in this chapter, keep using it! You would only need to make a few more edits including the favicon and any placeholder text. Optional edits include custom images, logos, font styles, color palettes, pages, and language translations. These edits are described in the chapter Curating the look, feel, and features. If you are interested in jumping straight into writing content (e.g.¬†blog posts), learn how that works in the chapter Authoring content. "]]
