[["google-analytics.html", "Chapter 9 Analyzing user traffic 9.1 Prerequisites 9.2 How it works 9.3 Set up Google Analytics 9.4 Analyze traffic using R 9.5 Closing thoughts", " Chapter 9 Analyzing user traffic This chapter shows you how to integrate Google Analytics into your website to capture data on your website users including the number of users, the pages they view, the sources from which they arrive at your website, and their geographic locations. This chapter covers the basics of the googleAnalyticsR R package for querying your Google Analytics data from R. Note: This chapter builds upon the default Hugo Anatole theme created in chapter 2. The finished product can be found here - https://r4sites-anatole-custom.netlify.app/. 9.1 Prerequisites Before you proceed, complete the following prerequisites: Choose your preferred style Generate your website (optional) Fine tune the look and feel (optional) Configure pages and features Go live on the internet Sign up for Google Analytics 9.2 How it works Once you sign up for Google Analytics, the main objectives are to create an Account and a Property for your website domain name, then obtain a Tracking ID. This tracking code will go in the config.yaml file on your website, which in turn will instruct Google Analytics to collect the data on user traffic to your website. 9.3 Set up Google Analytics Follow these steps to integrate Google Analytics into your website: Sign in to Google Analytics and navigate to Admin &gt; Create Account. üì∑ Image Under Account setup, provide an appropriate name (e.g.¬†personal-website) and configure the Account Data Sharing Settings to your liking. The defaults should be fine. Click ‚ÄúNext.‚Äù Under Property setup, provide an appropriate name (e.g.¬†personal-website-property). Under Property setup, click on ‚ÄúShow advanced options‚Äù to create a Universal Analytics property. For the Website URL, provide the URL to your website. Click ‚ÄúNext.‚Äù üì∑ Image Under About you business, configure the settings to your liking. Click ‚ÄúNext‚Äù and accept the terms of service. Locate the Tracking ID by returning back to the Admin console and selecting the Account and Property that were created in the previous steps. Important: Make sure you locate the Universal Analytics property that reads property name (UA-XXXXXXX-X) and not the GA4 property. Under Property, click on Tracking Info &gt; Tracking Code (üì∑ Image). Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. üì∑ Image Return to your RStudio Project where you are developing your website. Open the file config.yaml in the main directory and locate the googleAnalytics: parameter. Depending on the theme, this parameter may be written or spelled slightly differently. Paste your Google Analytics Tracking ID here, e.g.¬†googleAnalytics: 'UA-XXXXXXXXX-1'. üì∑ Image. Push your changes to your GitHub repository to complete the Google Analytics integration. 9.4 Analyze traffic using R googleAnalyicsR is an R package that makes it easy to query your Google Analytics data. 9.4.1 Dimensions and metrics In order to analyze your Google Analytics data, you need to gain a basic understand of Dimensions and Metrics. Dimensions are attributes of your data and Metrics are quantitative measurements. For example, to analyze the count of users on your website in the last 60 days, the Dimension is date and the Metric is users. Google Analytics supports hundreds of Dimension-Metric combinations. My recommendation is to browse Ultimate Google Analytics Dimensions and Metrics List to learn what is available. Also check out the Practical Tips page written by the author of the googleAnalyticsR package. 9.4.2 Install googleAnalyticsR install.packages(&quot;googleAnalyticsR&quot;, dependencies = TRUE) 9.4.3 R packages for data analytics library(googleAnalyticsR) ## calling Google Analytics API library(dplyr) ## data manipulation library(plotly) ## interactive charts library(DT) ## interactive tables library(leaflet) ## interactive maps 9.4.4 Authenticate your Google Analytics account Running ga_auth() in the R console will automatically open a page in your web browser and prompt you to authenticate your Google account. googleAnalyticsR::ga_auth() 9.4.5 List your Google Analytics accounts and properties Running ga_account_list() will list the Google Analytics account that was created in step 1 of Setting up Google Analytics. ## get your accounts ga_accounts &lt;- ga_account_list() ga_accounts ## # A tibble: 2 x 10 ## accountId accountName internalWebPrope‚Ä¶ level websiteUrl type webPropertyId ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 143402170 abndistro 204792927 STAND‚Ä¶ http://abndi‚Ä¶ WEB UA-143402170‚Ä¶ ## 2 143402170 abndistro 269232613 STAND‚Ä¶ https://www.‚Ä¶ WEB UA-143402170‚Ä¶ ## # ‚Ä¶ with 3 more variables: webPropertyName &lt;chr&gt;, viewId &lt;chr&gt;, viewName &lt;chr&gt; 9.4.6 Obtain viewId associated with your website To send API calls to Google Analytics, you need to obtain the viewId associated with the account. view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) print(view_id) ## [1] &quot;198103217&quot; 9.4.7 Daily count of website users To query the count of website users over a given date range, use the following Dimension and Metric: Dimension: date Metric: users daily_users &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-07-01&quot;, &quot;2019-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;date&quot; ) %&gt;% as_tibble() plot_ly( data = daily_users, x = ~date, y = ~users, mode = &quot;lines&quot; ) %&gt;% layout(title = &quot;Daily count of website between June 2019 and December 2019&quot;) 9.4.8 Users by device type To understand which device types your users are using to view your website, use the following Dimension and Metric: Dimension: deviceCategory Metric: users users_by_device_type &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2019-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;deviceCategory&quot; ) %&gt;% as_tibble() plot_ly( data = users_by_device_type, x = ~deviceCategory, y = ~users, type = &quot;bar&quot; ) %&gt;% layout(title = &quot;Users by device type&quot;) 9.4.9 Page views by page To measure the number of page views to each of your website pages, use the following Dimension and Metric: Dimension: pageTitle Metric: pageviews page_views &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;pageviews&quot;, dimensions = &quot;pageTitle&quot; ) %&gt;% as_tibble() page_views %&gt;% arrange(desc(pageviews)) %&gt;% DT::datatable() 9.4.10 Users by location To understand the geographical areas from which your website users view your website, use the following Dimension sand Metric: Dimensions: latitude, longitude Metric: users users_location &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) 9.4.11 Avoiding data sampling The google_analytics() function has an argument named anti_sampling, which is set to TRUE by default. This means that queries which return more than 1,000 rows of data will be sampled to avoid putting strain on the Google Analytics API. To avoid this default sampling strategy, set anti_sampling = FALSE when making API calls via the google_analytics() function. 9.5 Closing thoughts Google Analytics is a complex topic which cannot be covered in its entirety in this book. For most, having a basic understanding of the available Google Analytics Dimensions and Metrics should provide a solid foundation for interesting data analytics. "]]
