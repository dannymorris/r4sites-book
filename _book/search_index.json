[["index.html", "Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for launching your very own personal website, blog, or project portfolio using R, RStudio, and other freely available technologies including GitHub, Hugo, Netlify, and Google Analytics Chapter 1 Introduction 1.1 About this book 1.2 Target audience 1.3 Tools you will use 1.4 About Hugo and static websites 1.5 Inspiring examples 1.6 Engaging an audience 1.7 FAQ 1.8 About the Author", " Create, Publish, and Analyze Personal Websites Using R and RStudio A digital handbook with step-by-step instructions for launching your very own personal website, blog, or project portfolio using R, RStudio, and other freely available technologies including GitHub, Hugo, Netlify, and Google Analytics Danny Morris 2021-04-27 Chapter 1 Introduction Purchase this book 1.1 About this book In 2018, I had virtually no online presence other than about 100 random LinkedIn connections. I knew this was a problem given my budding interest in Data Science, the increasing demand for project portfolios, and the perceived need to “stand out” in the digital crowd. So, I learned how to publish my first personal website, Abnormal Distributions. Yes, I know, it looks outdated and definitely not as cool as this personal website. However, Abnormal Distributions served as the launchpad for growing my online presence. Since going live, it has served over 50,000 page views and 20,000 users from all over the world. To date, this post is by far the most popular. I began posting content on LinkedIn with links to my website, and in the span of a year I received 1,700 LinkedIn connection requests from Data Scientists and professionals in related fields. I began receiving job opportunities from recruiters who would reference Abnormal Distributions as the reason for wanting to connect. Abnormal Distributions turned out to be a wonderful investment of time and energy and an amazing learning experience. It helped spark my creativity, deepen my subject matter expertise through writing, and give me the confidence to engage with the digital crowd. My goal with this book is to help you launch your own personal website, blog, or project portfolio. You will learn the exact methdology that I use to create, design, publish, and analyze websites using R, RStudio, and other freely available tools including GitHub, Hugo, Netlify, and Google Analytics. All of the tools presented in this book are free to download or available through free accounts. No prior experience in web development, R, or any of the aforementioned technologies is needed to be successful with this book. Purchase this book here - https://r4sites.com/products/r4sites-book/. 1.2 Target audience The target audience for this book includes current or aspiring R users, Data Engineers, Data Analysts, and Data Scientists who are interested in establishing or enriching their online presence with a personal website, blog, or project portfolio. You do not have to be an experienced website developer to use the methodology described in this book. To learn more about whether or not this book is right for you, check out the FAQ section. 1.3 Tools you will use The methodology described in this book uses the tools listed below. Note that all of the tools listed are free to use. R and the blogdown package - Used for generating websites and authoring content. RStudio - Used for managing your website project and creating a remarkable website development experience. Hugo - Used by blogdown behind the scenes to generate beautiful, static websites. Git and GitHub - Used for pushing your website files from your local machine to a remote repository. Netlify - Used for publishing your website to the interent directly from your remote GitHub repository. Google Analytics and the googleAnalyticsR package - Used for analyzing user traffic on your website. Formspree - Used for putting contact forms on your website and collecting responses. 1.4 About Hugo and static websites Hugo is a modern, user-friendly website generator that turns front-end content (Markdown, HTML, CSS, Javascript) into static websites. Static websites are client-side only, meaning they make no use of back-end servers or server-side scripting languages. The only thing required to run a static website is a web browser. Blogdown is an R package that leverages Hugo behind the scenes to generate static websites from the aforementioned front-end content and R Markdown documents. The integration of Hugo and R Markdown, which supports R, Python, and SQL languages, means website developers can author content that features code along with its output including tables and interactive data visualizations. 1.5 Inspiring examples Below are some examples of personal websites, blogs, and portfolios that have been built using Hugo and blogdown. Also, be sure check out the Awesome Blogdown website for many more examples. Abnormal Distributions - My personal website and blog. Outrageously simple and straightforward. Designed for sharing tutorials and ideas. Based on the Hugo Xmin theme. R-Ladies NYC - Organization website dedicated to promoting gender diversity in the R community. Clean, modern layout. Great design for promoting groups, teams, projects, and events. Adapted form the Hugo Academic theme. Evan Odell - Personal website authored by Evan Odell featuring a blog, project portfolio, and biography. Crisp, clean, readable layout. Adapted from the Beautiful Hugo theme. Maëlle Salmon - Personal website authored by Maëlle Salmon featuring a blog, list of talks, publications, and biography. Adapted from the Blackburn theme. Julia Silge - Personal website authored by Julia Silge. Simple and professional. Adapted from the Hugo Academic theme. 1.6 Engaging an audience Having your own website is a great way to market yourself and engage a variety of audiences. Below is a list of ways to use websites to promote who you are and what you do. Post links to your website on your LinkedIn profile including your headline, summary, and Featured section. Post content on LinkedIn and Twitter with relevant links to your website. Post content in group pages on Facebook and Reddit with links to your website. Post links to your website on your resume in highly visible areas such as your contact information or list of personal projects. If there is a job you really want or a company you would love to work for, create a personalized website for this company with hyperfocused content and share it with the recruiter, hiring manager, current employees, and anyone else in the company’s network who might be impressed. This will surely set you apart from the competition! 1.7 FAQ What is the financial cost to create, publish, and analyze the types of websites described in this book? Absolutely nothing, unless you elect to purchase custom domains name which are typically $1 USD per month. Do I need a background in web development to create my own website? Absolutely not. In fact, this book presents information with the assumption that readers do not have a background in web development. You will find that the tools described in this book make it very simple for anyone to create attractive, feature-rich, and sustainable websites. Do I need to know R to build the types of websites described in this book? Not at all. You could create and publish your personal website without knowing or writing a single line of R code. The methodology described in this book simply explains how to integrate R and its ouutput (e.g. tables, graphs) into a website. If you don’t know R, a website could be a great way to learn it and document your journey! Can I author content using programming languages other than R? Yes. Website content, such as blog posts, can be created using R Markdown documents which support plain Markdown, R, Python, and SQL. What is the role of RStudio in the process of building the types of websites described in this book? RStudio is a free desktop application where all of your website development takes place. RStudio provides a simple interface for managing your website projects and the supporting materials including content, images, and code. RStudio also contains a “Viewer” pane, which will display your webiste locally and update it in real-time as you make changes to your website. This is discussed in more detail in the chapter Curating the look, feel, and features. Can I publish my website behind a custom domain name? Yes. See the chapter on Deploying on Netlify. 1.8 About the Author Hi! My name is Danny Morris, and thanks for checking out my book. I am an industry Data Scientist with a passion for writing, creating visual content, and building predictive models. I have published over a dozen websites for various purposes using the methodology described in this book. More than anything, I love helping people launch or elevate their professional journey. Feel free to shoot me an email and connect with me on LinkedIn "],["complete-end-to-end-example.html", "Chapter 2 Complete end-to-end example 2.1 How it works 2.2 Install software 2.3 Create accounts 2.4 Generate the website 2.5 Make some edits 2.6 Integrate Google Analytics 2.7 Integrate Formspree 2.8 Push the website to GitHub 2.9 Deploy the website on Netlify 2.10 Closing thoughts", " Chapter 2 Complete end-to-end example The purpose of this chapter is to inspire you with an example and to expose you to the entire process of creating, publishing, and analyzing your very own website. If you complete the steps described below, you will end up with this final product. If you like the look and feel of this final product, then all you need to do afterwards is personalize it (e.g. add your own profile image) and author content. These topics are described in the following chapters. 2.1 How it works The steps to create, publish, and analyze your very own personal website include: Install free software and create free accounts Generate the website using RStudio and the blogdown R package Make some basic edits to placeholder text Integrate Google Analytics to collect user traffic Integrate Formspree to power the contact form Push the website files to GitHub Deploy the live website on Netlify 2.2 Install software Start off by installing these free, open source tools if you haven’t already. My recommendation is to download the latest versions, which at the time of this writing are R 4.0, RStudio 1.4, Git 2.31.1. R RStudio Git 2.3 Create accounts Create free accounts with GitHub, Netlify, Google Analytics, and Formspree. Start with GitHub first, then use your GitHub registration to sign up for a Netlify account. To sign up for Google Analytics, click the link below and locate “Start for free” on the landing page. GitHub Netlify Google Analytics Formspree 2.4 Generate the website blogdown makes it super easy to generate a website that uses Hugo. Follow the steps below to create a website on your local machine. Launch RStudio and install the blogdown package by running install.packages(\"blogdown\"). Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. Example. Using the New Project Wizard, generate a website using the Hugo Anatole theme by defining Hugo theme: lxndrblz/anatole in the configuration. Click Create Project to generate the website. Example. Confirm that everything is working properly by running blogdown::serve_site() in the R console. A local, live, and fully functional preview of your website will appear in the Viewer pane in RStudio. Example. 2.5 Make some edits You will notice that the default Anatole theme contains placeholder text such as “My Blog” and “Call me Jane” on the homepage below the profile image. Follow the steps below to edit these placeholders. Change “My Blog” on the homepage by navigating to config/_default/languages.toml and changing the title parameter. Example. Change “Call me Jane” on the homepage by navigating to config/_default/params.toml and editing the title parameter. While you’re here, feel free to change other parameters including description, profilePicture, and social media links. Example. 2.6 Integrate Google Analytics Integrate Google Analytics into your website to collect and analyze user traffic. If you haven’t already, be sure to create a free Google Analytics account, then follow the steps below. Sign in to Google Analytics and navigate to Admin &gt; Create Account. Example Under Account setup, provide an appropriate name (e.g. my-example-site) and configure the Account Data Sharing Settings to your liking. Click “Next.” Under Property setup, provide an appropriate name (e.g. example-site-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL provided by Netlify when you first deployed your website. Click “Next.” Example Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate and copy the Tracking Code by returning the Google Analytics landing page and navigating to the Admin console. Select the Account and Property that were created in the previous steps. Under Property, click on Tracking Info &gt; Tracking Code. Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. Example Return to your RStudio Project where you are developing your website. Open the file config/_default/params.toml in the main directory and add a googleAnalytics parameter with your tracking code, as shown in this example. 2.7 Integrate Formspree The contact form on this demo website is powered by Formspree. Contact forms are a handy feature for collecting user feedback along with user emails. Formspree organizes and stores the responses to your contact form for you on their website. Follow the steps below to create a form “endpoint” and link it to the contact form on the demo website. Sign in to Formspree. Click “New Project” to create a new project for your website. Example. Click “New Form” to create a new contact form. Example Copy the form’s “endpoint.” Example Update the config/_default/params.toml file in the main webiste folder to update the contactFormAction parameter with your form endpoint, as shown in this example. 2.8 Push the website to GitHub Once your site is working locally, the next steps are to create a remote GitHub repository for your website, configure a local Git repository, and push your website files from your local environment to the remote repository. Follow these steps to create a remote GitHub repository and sync it to your local Git repository. Create a remote GitHub repository by signing in to GitHub and clicking “New” in the Repositories section. Configure the repository accordingly, then click Create repository. Example Create a local Git repository and associate it with the GitHub repository created in the previous step. To do this, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and running the following Git commands. # Change the directory to your website&#39;s root folder cd path/to/your/website/files # initialize local Git repo git init # add your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # point the local Git repo to the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 2.9 Deploy the website on Netlify Now that your website files are stored in your GitHub repository, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify account using your GitHub registration and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose the Github repository you configured in the previous steps. Leave the site settings alone and click “Deploy site” to publish your website. Example After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the domain name randomly generated by Netlify. Example. Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 2.10 Closing thoughts The steps to create and publish a website presented in this chapter are discussed in greater detail in the following chapters. Start with the next chapter, Choosing a Hugo theme, to learn about choosing a website layout and style that aligns with your vision and goals for your website. If you like the look and feel of the website created in this chapter, keep using it! You would only need to make a few more edits including the favicon and any placeholder text. Optional edits include custom images, logos, font styles, color palettes, pages, and language translations. These edits are described in the chapter Curating the look, feel, and features. If you are interested in jumping straight into writing content (e.g. blog posts), learn how that works in the chapter Authoring content. "],["choose-theme.html", "Chapter 3 Choosing a Hugo theme 3.1 How it works 3.2 The 90/10 rule for themes 3.3 Generating websites from themes 3.4 Editing your theme", " Chapter 3 Choosing a Hugo theme This chapter provides some guidance on exploring website layouts and styles that inspire you, reflect your unique style, and achieve your website goals. Evaluating layouts and styles in a significant step in your website planning phase. A good theme that inspires you can have an enormous effect of unlocking your creativity and empowering you to author great content. 3.1 How it works Hugo, the static website generator upon which the websites in this book are based, is supported by an active developer community that has contributed dozens of beautiful, free, pre-built design themes for you to use in your own website project. Hugo themes are professionally designed, convenient, and fully functional out of the box. Hugo themes eliminate the need to design your own website layout and style from scratch, making professional websites accessible to quite literally anyone. Spend some time browsing the Hugo themes to see what is out there for you to use in your own website project. The steps required to generate a website with your preferred theme are discussed in the next chapter. 3.2 The 90/10 rule for themes The key to creating an attractive, high-performing, and sustainable website is to select a Hugo theme that contains 90% or more of the look, feel, and functionality you desire for your website. The remaining 10% of your website design can come from basic design tweaks such as colors, fonts, images, and adding/removing basic features. Unless you are (or want to be) a front end Hugo web developer, attempting too many changes to your favorite Hugo theme increases your risk of making poor decision decisions and negatively affecting your website’s overall look and performance. 3.2.1 Recommended themes Depending on your goals, you may be more or less restricted to certain Hugo themes. For example, if you intend to create content using R Markdown documents that feature code highlighting, tables, and interactive visualizations, then you may find that certain themes do a poor job of rendering these types of output. On the other hand, if you intend to create basic content using plain Markdown documents, you may not experience any content rendering issues with any of the themes you consider. Either way, you’ll likely go through a few rounds of trial and error before you settle on a theme that meets most or all of your needs. Tip: When browsing Hugo themes, pay attention to the date on which the theme was most recently updated. Example. It’s best to avoid themes that have not been updated in the last few months or so. Here are some themes that I recommend based on performance, content rendering, and personal style preference. Note that this is not an exhaustive list of all themes that I would recommend. Recommended themes for content created with Markdown Tranquilpeak - Modern, clean layout. Easy to customize and very readable. Great for personal websites, blogs, and portfolios. Anatole - Similar to Tranquilpeak with a more sophisticated About page. Eureka - Clean, professional layout. Easy to customize. Great for portfolios and professional landing pages. Blackburn - Clean layout. Easy to read and navigate. Great for personal websites, blogs, and portfolios. Beautiful Hugo - Crips, clean design. Great for personal websites, blogs, and portfolios. Recommended themes for other use cases Hargo and Vex - Modern e-commerce themes for advertising and selling products Doks - Modern documentation theme Bigspring - Modern design for small businesses offering a particular service Pico - Modern design for promoting yourself and your work Hugo Product Launch - Simple layout for promoting an upcoming product Hugo Scroll - Simple, highly visual layout for promoting your services or expertise 3.3 Generating websites from themes To generate a blogdown website from a chosen theme, follow these steps: Browse the list of Hugo themes. Click on a theme you like, then click “Demo” to explore a complete example. Once you find something you really like, click “Download” on the theme homepage to be taken to the source code in GitHub. Example. To create a website with your chosen theme, copy the user/theme-name in the GitHub URL. For example, if the source code is located at https://github.com/devcows/hugo-universal-theme, you’ll want to copy devcows/hugo-universal-theme. Follow the steps to generate a website described in the next chapter. 3.4 Editing your theme This topic is discussed in detail in the next chapter, Curating the website features. In all likelihood, you will want to edit some aspects of your preferred Hugo theme to alter the look, feel, and functionality of your website. It’s important to note that theme developers do not follow the exact same approach as all other developers when designing a theme. Therefore, there is no universal approach to editing themes. There are, however, some common approaches to editing basic characteristics such as colors, font styles, logos, sections, contact forms, and so on. Those will be described in the next chapter. "],["generate.html", "Chapter 4 Generating a blogdown website 4.1 How it works 4.2 Use case 4.3 Generate your site in three steps 4.4 Serving the website locally", " Chapter 4 Generating a blogdown website This chapter teaches you how to generate an initial website, the first and most influential step in your journey to owning your very own website. If you haven’t already, start by completing the following prerequisites: Install R Install RStudio My recommendation is to download the latest versions, which at the time of this writing are R 4.0 and RStudio 1.4. 4.1 How it works The R package blogdown in tandem with RStudio make it incredibly simple to generate your initial website. Under the hood, blogdown uses Hugo to generate static websites. Hugo websites are fast and developer-friendly, and Hugo developers have contributed a wide range of beautiful, free, pre-built design themes for you to use in your website project. 4.2 Use case This chapter, and all subsequent chapters, will build upon the default Hugo Tranquilpeak theme. The finished product can be seen here - https://r4sites-transquilpeak.netlify.app/ 4.3 Generate your site in three steps Follow these steps to generate a Hugo website using R and RStudio: Launch RStudio and install the blogdown package by running install.packages(\"blogdown\") in the R console. Create a new RStudio Project by going to File &gt; New Project &gt; New Directory &gt; Website using blogdown. Example Configure the website to use the Tranquilpeak theme, as show in this example configuration. Make sure to set the Hugo theme: parameter to kakawait/hugo-tranquilpeak-theme. The topic of theme selection is discussed in the next chapter. Finally, click Create Project to generate the initial website. 4.4 Serving the website locally The blogdown package includes a handy function called serve_site(). Running this function in the R console with your website’s RStudio Project loaded will render a local copy of your entire website in the RStudio “Viewer” pane, as shown in this example. The best part of this feature is that as you make and save changes to your website files, the local rendering will update in real-time and reflect your changes. This feature of blogdown, known as LiveReload, enables rapid trial and error on your local machine without ever having to leave the RStudio environment. "],["curate-features.html", "Chapter 5 Curating the look, feel, and features 5.1 How it works 5.2 Tips for working efficiently 5.3 Use case 5.4 Title and description 5.5 Logos and profile images 5.6 Favicons 5.7 Fonts 5.8 Colors 5.9 Managing pages and sections 5.10 Contact forms 5.11 Foreign languages 5.12 Social media links 5.13 Closing thoughts on themes", " Chapter 5 Curating the look, feel, and features This chapter teaches you how to edit the look and feel of your website and how to personalize certain features including logos, page navigation, contact forms, and social media links. 5.1 How it works Recall that the types of static websites described in this book are simply a collection of text files including Markdown, HTML, CSS, and Javascript file types that Hugo compiles into a website. Therefore, changes to the look, feel, and features of your website are done simply by editing the relevant files and folders that make up your website. Editing the look and feel with CSS If you are not familiar with CSS (Cascading Style Sheets), take a look at this CSS stylesheet. While HTML defines the general layout of a webpage, CSS is used to control the appearance of an HTML webpage and its elements including font styles, colors, buttons and links, positioning and dimensions of images, and so on. If you intend to alter the look and feel of your website, you will likely be spending most of your time editing your website’s primary CSS files. To learn more about CSS, visit w3schools for tutorials and read about using the Inspect tool in your browser. Editing features related to content and navigation Personal websites and blogs typically have the following navigation pages and content features: Home, Blog, Projects, About Me, and Contact. The Anatole demo website has a similar structure with some minor differences. The presence or absence of content and navigation pages is dependent upon the existance of folders and files located in the content folder in the main website directory. For example, the Anatole demo website contains navigation links to pages titled Home, Posts, About, and Contact. These features have supporting files in the content folder in the main website directory, as shown in the website’s content folder. To remove content and features, you can do one of the following: delete the relevant folder in the content directory (e.g. delete the posts folder), or (recommended) edit the config.yaml file to explicity define the content and features you want on your site, as shown in this example. 5.2 Tips for working efficiently Using the browser’s Inspect tool The “Inspect” tool in your browser is an essential tool for experimenting with changes to CSS and HTML directly in the browser. Using the Inspect tool results in temporary changes, and when the browser is refreshed the original properties are restored. Access this tool in the browser by right-clicking on any page element you want to edit (e.g. images, text, links, buttons) and click on “Inspect,” as shown in this example Practice using the Inspect tool with these examples: Visit Google and edit the “Google Search” button by changing the background color and font color. Watch the video demonstration on YouTube. After changing the background color and font color of the search button, feel free to experiment with changing other properties as well. Vist this question on Stack Overflow and practice editing image dimensions, colors of links and bold text, and code snippets. Watch the video demonstration on YouTube Serve the site locally Once you have generated a website using the Anatole theme, run blogdown::serve_site() in the R console from within your RStudio Project to render a live, local copy of the website. To learn about serving the site locally, read this section. 5.3 Use case To keep things simple, we will focus on a use case that revolves around tweaking the Anatole theme. To begin, follow the instructions outlined in Generating websites from themes. Then, follow along with the steps below. The theme’s demo website can be found here - https://themes.gohugo.io/theme/anatole/. The finished product resulting from the following steps can be found here - https://r4sites-anatole.netlify.app/. 5.4 Title and description The title of the Anatole demo website is “My Blog.” To change this to something more personal, navigate to config/_default/languages.toml and edit the title parameter. Example. 5.5 Logos and profile images The profile image is the main image on the homepage with a circular border. To edit this, navigate to static/images/ and replace profile.jpg with your own image (example). Keep the file named profile.jpg so the theme will recognize your image. If your image appears too wide/narrow or too tall/short, navigate to themes/anatole/assets/css/style.css and edit the CSS properties. For this theme, you will need to edit the CSS properties here for narrow screen devices and here for wide screen devices. 5.6 Favicons Navigate to static/favicons/ and replace favicon.ico with your own favicon. The favicon is the tiny image that appears in the web browser tab for your website. To create a favicon from an image, visit https://favicon.io/favicon-converter/. Keep the file named favicon.ico in the same folder. 5.7 Fonts If you don’t like the default font, you can easily change it. For example, to use the Google Font Quicksand insert this line of code in the themes/anatole/layouts/partials/head.html file. Then, navigate to themes/anatole/assets/css/style.css and change the font property in the body element (example). You can also change basic font properties (e.g. size, color), but you will have to know what CSS class to change. Examples include p(example), .page-top .nav(example), and .page-top .nav a(example). 5.8 Colors 5.9 Managing pages and sections 5.10 Contact forms 5.11 Foreign languages (optional) Remove all content supporting a language translation. By default, the Anatole theme supports an Arabic language translation. To remove all content supporting this translation, delete the file config/_default/menus.ar.toml, edit the file config/_default/languages.toml by removing all Arabic language parameters (example), then delete the folder content/arabic/ and all of its contents. 5.12 Social media links Navigate to config/_default/params.toml and edit the links to your social medial accounts beginning on line 40. Example 5.13 Closing thoughts on themes Relying on themes is the quickest way to launch a professional website. Editing the look and feel of your website can be a lot of fun, but you must be careful not to go overboard. Here are some tips to keep in the back of your mind while you’re editing your theme: Before you make any edits, go ahead and run blogdown::serve_site() in the R console within the RStudio Project. This will launch your website locally and will update automatically whenever edits are detected. Whenever you make a change, check the result on wide and narrow screens. You can do this with the browser on your desktop by maximizing the browser width (wide screen) and decreasing the width to mimic a mobile device (narrow screen). Try not to edit the theme’s default layout. Instead, focus on colors, font, images, and content to reflect you personal style. After you make a change, carefully scrutinize the result and look for any unexpected consequences. "],["content.html", "Chapter 6 Authoring content 6.1 Creating posts 6.2 Example R Markdown post 6.3 Example Markdown post", " Chapter 6 Authoring content This chapter provides some general guidance on creating content, such as blog posts, using R Markdown as well as plain Markdown. By this point, you should have created a new blogdown site with your preferred theme. In this chapter, we will continue to build on the website that was created in the previous chapter, which uses the Anatole theme. To view the finished product, visit https://example-anatole.netlify.app/ 6.1 Creating posts As the website developer, new content you create will typically be in the form of a post. Common types of posts are blog entries, tutorials, portfolio entries, project documentation, and so on. With blogdown, posts can either be R Markdown documents or plain Markdown documents. The only difference between the two is that R Markdown enables you to insert and execute server-side code (e.g. R code) and display the output in the post body in addition to plain Markdown syntax. Markdown, on the other hand, is static content that cannot execute server-side code. The recommended way to add a blog post is with the RStudio Addin labeled “New post,” as shown in this example. This addin will display a simple GUI for configuring the metadata for your new post including the post title, author, date, tags, content type and more. This example post configuration generates a R Markdown post destined for the post subdirectory. The archetype, filename, slug, and language are handled automatically and require no changes. 6.2 Example R Markdown post Before you create a new post, go ahead and run blogdown::serve_site() in the R console with your RStudio Project opened. This will launch your website locally and will update automatically whenever edits are saved. This is key for rapid development and iteration. If you haven’t already, leverage this example post configuration to create a new post R Markdown. The default document contains limited metadata and no body content. What to include is ultimately a matter of personal preference, but this R Markdown post provides a great starting point with some handy features including syntax highlighting, table of contents, and message/warning suppression. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-writing-a-post-using-r-markdown/ 6.3 Example Markdown post Unlike R Markdown, plain Markdown documents render static content only (e.g. text, images, multimedia) and cannot execute server-side code. If your post does not need to execute code and render its ouput, then author the post using plain Markdown. To configure a plain Markdown post, follow this example post configuration but change the Format parameter to Markdown instead of R Markdown. This example Markdown post should get you started. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-example-plain-markdown-post/ "],["deploy.html", "Chapter 7 Deploying on Netlify 7.1 How it works 7.2 Upload website files to GitHub 7.3 Configure Netlify for deployment 7.4 Using a custom domain name", " Chapter 7 Deploying on Netlify This chapter describes a simple, repeatable approach to putting your website on the internet. If you haven’t already, complete the following prerequisites. Create your blogdown website and (optionally) add some content Install Git Sign up for GitHub Sign up for Netlify 7.1 How it works Hugo (the static site generator used by blogdown), GitHub, and Netlify are the three tools that make it incredibly simple to deploy your website to the internet. The main steps are to upload your website files to a remote GitHub repository, then create a new site in Netlify that points to your GitHub repository URL. Netlify will then do all of the heavy lifting of building and deploying your Hugo website to the internet. All of this can be done in a matter of minutes with just a few lines of code and a few clicks. 7.2 Upload website files to GitHub Once your website is working locally, the next steps are to create a remote GitHub repository for your website files, configure a local Git repository, and push your website files from your local Git repository to your remote GitHub repository. Follow these simple steps to make this happen: Sign in to GitHub and create a new repository by clicking “New” in the Repositories section. Configure the repository accordingly, then click “Create repository.” Example On your local machine, launch Git from the command line (e.g. Git Bash on Windows, Terminal on Mac/Linux) and run the following Git commands to sync a local Git repository with your newly created remote GitHub repository. # Change the directory to your website&#39;s root folder cd path/to/your/website # initialize local Git repo git init # add all of your website files to the local Git repo git add --all # commit your website files to the local Git repo git commit -m &quot;first commit&quot; # sync the local Git repo with the remote GitHub repo # change your_username and your_repo to your GitHub username and repo name git remote add origin https://github.com/your_username/your_repo.git # push your files to GitHub git push -u origin master 7.3 Configure Netlify for deployment Now that your website files are stored in GitHub, use Netlify to deploy your website. Netlify will deploy your website directly from your GitHub repository. Any time you push new or edited content to the GitHub repo, Netlify will automatically deploy a new version of your website. This is known as continuous deployment and is key to rapid iteration. Follow these steps to deploy your website on Netlify. Log in to Netlify and click “New site from Git.” Select GitHub as the Continuous Deployment provider, then choose your website’s GitHub repository. Leave the site settings alone and click “Deploy site” to publish your website. Example After a few seconds, your webiste will be deployed on Netlify. To view your website, return to the Site Overview section and locate the default domain name generated by Netlify. Example. Default Netlify domains tend to look something like this - https://jovial-roentgen-f2a53c.netlify.app/. To change this, go to Site settings &gt; Change site name. 7.4 Using a custom domain name Netlify’s default domain names end with .netlify.app. If you don’t care for this domain extension, you can purchase a custom domain for your website. Though several domain registrars exist, the simplest route is to purchase a domain name through Netlify. If you use a domain registrar other than Netlify (e.g. Google Domains), you will have to manually configure Domain Name Servers and Domain Name System settings. With Netlify, all of this is taken care of for you. Follow the simple steps below to purchase a custom domain through Netlify: Log in to Netlify, open your site, and click on “Domain settings.” Example. Under Custom domains, click “Add custom domain.” Search for a domain name you like, then click “Verify” to determine if the domain is already owned or available for purchase. If available, confirm the purchase with a credit card and (optionally) set the domain name to auto-renew annually. Example. Enable IPv6 to reach areas of the world where connectivity via IPv4 is not possible. Do this by signing in to Netlify and navigating to Team overview &gt; Domains, select your custom domain name, and click “Enable IPv6 on your domain.” Example. "],["google-analytics.html", "Chapter 8 Analyzing traffic with Google Analytics 8.1 How it works 8.2 Setting up Google Analytics 8.3 Analyzing traffic using googleAnalyticsR", " Chapter 8 Analyzing traffic with Google Analytics This chapter shows you how to embed Google Analytics on your website to capture traffic from users. Additionally, this chapter will provide some guidance on how to analyze traffic using the R package googleAnalyticsR. If you haven’t already, complete the following prerequisites: Create your blogdown website and (optionally) add some content Deploy your site on Netlify Sign up for Google Analytics 8.1 How it works Once you sign up for Google Analytics, the main objectives are to create an Account and a Property for your website domain name, then obtain a Tracking ID. This tracking code will go in the config.yaml file on your website, which in turn will instruct Google Analytics to collect the data on user traffic to your website. 8.2 Setting up Google Analytics Follow these steps to integrate Google Analytics into your website: Sign in to Google Analytics and navigate to Admin &gt; Create Account. Example Under Account setup, provide an appropriate name (e.g. personal-website) and configure the Account Data Sharing Settings to your liking. The defaults should be fine. Click “Next.” Under Property setup, provide an appropriate name (e.g. personal-website-property). Under Property setup, click on “Show advanced options” to create a Universal Analytics property. For the Website URL, provide the URL to your website. Click “Next.” Example Under About you business, configure the settings to your liking. Click “Next” and accept the terms of service. Locate the Tracking ID by returning back to the Admin console and selecting the Account and Property that were created in the previous steps. Important: Make sure you locate the Universal Analytics property that reads property name (UA-XXXXXXX-X) and not the GA4 property. Under Property, click on Tracking Info &gt; Tracking Code (example). Copy the Tracking ID, which should appear in the form of UA-XXXXXXXXX-1. Example Return to your RStudio Project where you are developing your website. Open the file config.yaml in the main directory and locate the googleAnalytics: parameter. Depending on the theme, this parameter may be written or spelled slightly differently. Paste your Google Analytics Tracking ID here, e.g. googleAnalytics: 'UA-XXXXXXXXX-1'. Example. Push your changes to your GitHub repository to complete the Google Analytics integration. 8.3 Analyzing traffic using googleAnalyticsR googleAnalyicsR is an R package for analyzing Google Analytics data stemming from traffic to your website. 8.3.1 Install the package install.packages(&quot;googleAnalyticsR&quot;, dependencies = TRUE) 8.3.2 Authenticate your Google Analytics account library(googleAnalyticsR) ga_auth(email=&quot;usc00@hotmail.com&quot;) 8.3.3 Load packages for data analytics library(dplyr) library(plotly) library(DT) library(leaflet) 8.3.4 List your Google Analytics accounts and properties ## get your accounts ga_accounts &lt;- ga_account_list() ga_accounts 8.3.5 Obtain viewId associated with your website view_id &lt;- ga_accounts %&gt;% filter(accountName == &quot;abndistro&quot;, webPropertyName == &quot;Abnormal Distributions&quot;) %&gt;% pull(viewId) 8.3.6 Daily count of website users daily_users &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;date&quot; ) %&gt;% as_tibble() plot_ly( data = daily_users, x = ~date, y = ~users, mode = &quot;lines&quot; ) %&gt;% layout(title = &quot;Daily count of users who engaged with Abnormal Distributions&quot;) 8.3.7 Users by device type users_by_device_type &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = &quot;deviceCategory&quot; ) %&gt;% as_tibble() plot_ly( data = users_by_device_type, x = ~deviceCategory, y = ~users, type = &quot;bar&quot; ) %&gt;% layout(title = &quot;Users by device type&quot;) 8.3.8 Page views by page page_views &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;pageviews&quot;, dimensions = &quot;pageTitle&quot; ) %&gt;% as_tibble() page_views %&gt;% arrange(desc(pageviews)) %&gt;% DT::datatable() 8.3.9 Users by location users_location &lt;- google_analytics( viewId = view_id, date_range = c(&quot;2019-01-01&quot;, &quot;2020-12-31&quot;), metrics = &quot;users&quot;, dimensions = c(&quot;latitude&quot;, &quot;longitude&quot;), anti_sample = T ) %&gt;% as_tibble() %&gt;% mutate_at(vars(latitude, longitude), list(as.numeric)) users_location %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers( lng = ~longitude, lat = ~latitude, radius = ~log(users), stroke = FALSE, fillOpacity = 0.5 ) "],["extras.html", "Chapter 9 Extras 9.1 Contact forms", " Chapter 9 Extras 9.1 Contact forms Formspree "]]
