# Creating Content

This chapter provides some general guidance on creating content, such as blog posts, using R Markdown as well as plain Markdown. By this point, you should have [created a new blogdown site](#create-new-blogdown) with your [preferred theme](#select-hugo-theme).

In this chapter, we will continue to build on the website that was created in the previous chapter, which uses the [Anatole](https://themes.gohugo.io/anatole/) theme. To view the finished product, visit https://example-anatole.netlify.app/

## Adding posts

As the website developer, new content you create will typically be in the form of a post. Common types of posts are blog entries, tutorials, portfolio entries, project documentation, and so on. With blogdown, posts can either be [R Markdown](https://bookdown.org/yihui/rmarkdown/html-document.html) documents or plain [Markdown](https://www.markdownguide.org/getting-started/) documents. The only difference between the two is that R Markdown enables you to insert and execute server-side code (e.g. R code) and display the output in the post body in addition to plain Markdown syntax. Markdown, on the other hand, is static content that cannot execute server-side code.

The recommended way to add a blog post is with the RStudio Addin labeled "New post", as shown in this [example](https://i.imgur.com/S9dl4DZ.png). This addin will display a simple GUI for configuring the metadata for your new post including the post title, author, date, tags, content type and more. This [example post configuration](https://i.imgur.com/UEzRUnO.png) generates a R Markdown post destined for the `post` subdirectory. The archetype, filename, slug, and language are handled automatically and require no changes.

## Example R Markdown post

Before you create a new post, go ahead and run `blogdown::serve_site()` in the R console with your RStudio Project opened. This will launch your website locally and will update automatically whenever edits are saved. This is key for rapid development and iteration.

If you haven't already, leverage this [example post configuration](https://i.imgur.com/UEzRUnO.png) to create a new post R Markdown. The default document contains limited metadata and no body content. What to include is ultimately a matter of personal preference, but [this R Markdown post](https://github.com/dannymorris/anatole-site/blob/master/content/english/post/2021-04-22-writing-a-post-using-r-markdown/index.en.Rmd) provides a great starting point with some handy features including syntax highlighting, table of contents, and message/warning suppression. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-writing-a-post-using-r-markdown/

## Example Markdown post

Unlike R Markdown, plain Markdown documents render static content only (e.g. text, images, multimedia) and cannot execute server-side code. If your post does not need to execute code and render its ouput, then author the post using plain Markdown. To configure a plain Markdown post, follow this [example post configuration](https://i.imgur.com/UEzRUnO.png) but change the Format parameter to Markdown instead of R Markdown.

This [example Markdown post](https://raw.githubusercontent.com/dannymorris/anatole-site/master/content/english/post/2021-04-22-example-plain-markdown-post/index.en.md) should get you started. The published version of this post can be viewed here - https://example-anatole.netlify.app/post/2021-04-22-example-plain-markdown-post/